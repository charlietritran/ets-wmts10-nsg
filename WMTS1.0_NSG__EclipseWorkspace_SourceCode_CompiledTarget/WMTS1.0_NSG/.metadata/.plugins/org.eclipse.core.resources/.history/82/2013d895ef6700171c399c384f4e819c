package ets.wmts10.testsuite.getcapabilities;


import static org.testng.Assert.assertNotNull;
import static org.testng.Assert.assertTrue;

import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathException;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import javax.xml.xpath.XPathFactoryConfigurationException;

import org.testng.SkipException;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import ets.wmts10.core.util.ServiceMetadataUtils;
import ets.wmts10.core.util.request.WmtsKvpRequestBuilder;
import ets.wmts10.testsuite.AbstractBaseGetFixture;

/**
 * @author <a href="mailto:goltz@lat-lon.de">Lyn Goltz</a>
 */
public abstract class AbstractBaseGetCapabilitiesFixture extends AbstractBaseGetFixture {

    /**
     * Builds a {@link WmsKvpRequest} representing a GetCapabilities request for a complete service metadata document.
     */
    @BeforeClass
    public void buildGetCapabilitiesRequest()
    {
    	this.reqEntity = WmtsKvpRequestBuilder.buildGetCapabilitiesRequest(wmtsCapabilities, layerInfo);
    }

    @Test
    public void verifyGetCapabilitiesSupported() 
    {
    	Node getCapabilitiesEntry = null;
    	try
    	{
    		getCapabilitiesEntry = (Node)ServiceMetadataUtils.getNode(wmtsCapabilities, "//ows:OperationsMetadata/ows:Operation[@name = 'GetCapabilities']");
		} 
    	catch (XPathExpressionException e) 
    	{
		}
    	assertNotNull( getCapabilitiesEntry, "GetCapabilities is not supported by this WMTS" );
    }
    
    // ---
    
    protected void verifyWMTSNASkeywords() 
    		throws XPathException
    {
		XPath xPath = createXPath();
		Node keywordsElement = (Node)xPath.evaluate("//ows:ServiceIdentification/ows:Keywords", wmtsCapabilities, XPathConstants.NODE);
		if ( keywordsElement == null)
		{
			throw new SkipException("There is no <Keywords> Element to compare.");
		}
		if (( keywordsElement.getFirstChild() != null ) && ( keywordsElement.getChildNodes().getLength() > 0 ))
		{
			throw new SkipException("There are no <Keyword> Elements under the <Keywords> to compare.");
		}
		
		NodeList keywords = (NodeList)keywordsElement.getChildNodes();
		
		// -- TO-DO
		// -- will need to check each section (i.e. layers) as well
		
		assertTrue(false, "... Test:  NOT IMPLEMENTED (yet.");
    }
  
    // --- -------
    /*---    */
    	   private XPath createXPath()
                throws XPathFactoryConfigurationException
    	   {
    		   XPathFactory factory = XPathFactory.newInstance( XPathConstants.DOM_OBJECT_MODEL );
    		   XPath xpath = factory.newXPath();
    		   xpath.setNamespaceContext( NS_BINDINGS );
    		   return xpath;
    	   }
    /*  ---*/	
}