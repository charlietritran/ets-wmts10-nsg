package nsg.wmts10.testsuite.getcapabilities;

import java.net.URI;

import org.testng.annotations.Test;
import org.w3c.dom.Document;

import static de.latlon.ets.core.assertion.ETSAssert.assertXPath;
import static de.latlon.ets.core.assertion.ETSAssert.assertUrl;
import static de.latlon.ets.core.assertion.ETSAssert.assertUriIsResolvable;

import static org.testng.Assert.assertTrue;

import javax.xml.namespace.QName;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.MimeHeaders;
import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPConstants;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPFault;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;

import javax.xml.transform.*;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.stream.StreamResult;
/*--
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import javax.xml.xpath.XPathFactoryConfigurationException;
--*/
import ets.wmts10.core.domain.ProtocolBinding;
import ets.wmts10.core.domain.WMTS_Constants;
import ets.wmts10.core.domain.WmtsNamespaces;
import ets.wmts10.core.util.ServiceMetadataUtils;
import ets.wmts10.testsuite.getcapabilities.AbstractBaseGetCapabilitiesFixture;


public class GetCapabilitiesSoap extends AbstractBaseGetCapabilitiesFixture 
{
/*---
	NSG Requirement 3: 
		An NSG WMTS server shall generate a ServiceMetadata document in response to a SOAP encoded GetCapabilities request. 	
---*/
	private URI soapURI;
	
	private boolean _debug = false;
//--	private String _debugSOAPurl = "http://www.opengis.uab.es/cgi-bin/world/MiraMon5_0.cgi?";
//--	private String _debugSOAPurl = "https://basemap.nationalmap.gov:443/arcgis/services/USGSTopo/MapServer";
	
	//@BeforeTest
	GetCapabilitiesSoap()
	{		
	}
	
	// ---
	
	@Test(description = "NSG Web Map Tile Service (WMTS) 1.0.0, Requirement 3")
	public void wmtsCapabilitiesSOAPCapable()
	{
		soapURI = ServiceMetadataUtils.getOperationEndpoint_SOAP(wmtsCapabilities, WMTS_Constants.GET_CAPABILITIES, ProtocolBinding.POST);
/*--
if ( soapURI==null)
{
soapURI = URI.create(this._debugSOAPurl);
}
--*/			
		assertTrue(this.soapURI != null, "This WMTS does not support SOAP or does not ");
	}
	
	// ---
	
	@Test(description = "NSG Web Map Tile Service (WMTS) 1.0.0, Requirement 3", dependsOnMethods="wmtsCapabilitiesSOAPCapable")
	public void wmtsCapabilitiesSOAPReponseTest() 
			throws SOAPException
	{
		assertTrue(soapURI != null, "There is no SOAP URL to test against");

		String soapURIstr = soapURI.toString(); 
		assertUrl(soapURIstr);
		//assertUriIsResolvable(soapURIstr);
		
		SOAPMessage soapResponse = null;
		SOAPMessage soapMessage = createSOAPRequest(soapURIstr);
		
        // Send SOAP Message to SOAP Server

		SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
		SOAPConnection soapConnection = soapConnectionFactory.createConnection();
		
		try
		{			
			soapResponse = soapConnection.call(soapMessage, soapURIstr);
		}
		finally
		{
			soapConnection.close();
		}
		
         // Process the SOAP Response
		if ( this._debug )
		{
			printSOAPResponse(soapResponse);
		}
		assertTrue(soapResponse != null, "SOAP reposnse came back null");
		
		Source responseContent = soapResponse.getSOAPPart().getContent();

		try
		{
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
		
			DOMResult result = new DOMResult();  
			transformer.transform(responseContent, result);  
			Document soapDocument = (Document)result.getNode();
		/*--
			this.parseNodes(soapDocument,0);
		--*/	
			 assertXPath( "//wmts:Capabilities/@version = '1.0.0'", soapDocument, NS_BINDINGS );
		
		}
		catch (TransformerException te)
		{
			if ( this._debug )
    		{
    			System.out.println("SOAP Response Error Message = " +  te.getMessage());
    		}
    		assertTrue(false, "SOAP Response Error Message = " +  te.getMessage());
		}
	}
         
	// --- --------
	
    private SOAPMessage createSOAPRequest(String url) 
    		//throws Exception
    {
    	SOAPMessage soapMessage = null;
    	
    	try
    	{
    		MessageFactory messageFactory = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
    		soapMessage = messageFactory.createMessage();
        
    		MimeHeaders headers = soapMessage.getMimeHeaders();
    		headers.addHeader("SOAPAction", url + "/" +  WMTS_Constants.GET_CAPABILITIES);

    		SOAPPart soapPart = soapMessage.getSOAPPart();

    		// --- SOAP Envelope
    		SOAPEnvelope soapEnvelope = soapPart.getEnvelope();

    		// --- SOAP Body
    		SOAPBody soapBody = soapEnvelope.getBody();
        

    		QName qnAttr = new QName( WmtsNamespaces.WMTS, WMTS_Constants.SERVICE_PARAM.toLowerCase() );
    		QName qnElem = new QName( WmtsNamespaces.WMTS, WMTS_Constants.GET_CAPABILITIES);
        
    		SOAPElement elemOperation = soapBody.addChildElement(qnElem);
    		//SOAPElement elemAttr = 
    		elemOperation.addAttribute(qnAttr, WMTS_Constants.SERVICE_TYPE_CODE);

     		elemOperation.addNamespaceDeclaration(WmtsNamespaces.serviceOWS, WmtsNamespaces.OWS);
    		
    		SOAPElement elemOperationAcceptVersions = elemOperation.addChildElement(WMTS_Constants.ACCEPT_VERSIONS_PARAM, WmtsNamespaces.serviceOWS);
    		SOAPElement elemOperationAcceptVersionsVersion = elemOperationAcceptVersions.addChildElement(WMTS_Constants.VERSION_PARAM, WmtsNamespaces.serviceOWS);
    		elemOperationAcceptVersionsVersion.addTextNode(WMTS_Constants.VERSION);
        
    		SOAPElement elemOperationAcceptFormats = elemOperation.addChildElement(WMTS_Constants.ACCEPT_FORMAT_PARAM, WmtsNamespaces.serviceOWS);
    		SOAPElement elemOperationAcceptFormatsOutputFormatSOAP = elemOperationAcceptFormats.addChildElement(WMTS_Constants.OUTPUT_PARAM, WmtsNamespaces.serviceOWS);
    		elemOperationAcceptFormatsOutputFormatSOAP.addTextNode(WMTS_Constants.SOAP_XML);
    		if ( false)
    		{
    			SOAPElement elemOperationAcceptFormatsOutputFormatXML = elemOperationAcceptFormats.addChildElement(WMTS_Constants.OUTPUT_PARAM, WmtsNamespaces.serviceOWS);
    			elemOperationAcceptFormatsOutputFormatXML.addTextNode(WMTS_Constants.APPLICATION_XML);
    		}
    		//if (false)
    		// -- clean up default settings (not sure if meaningful or not)
    		{
    			SOAPHeader header = soapMessage.getSOAPHeader();
    			SOAPFault fault = soapBody.getFault();
    			soapEnvelope.removeNamespaceDeclaration(soapEnvelope.getPrefix());
    			soapEnvelope.addNamespaceDeclaration(WmtsNamespaces.serviceSOAP, WmtsNamespaces.SOAP);
    			soapEnvelope.setPrefix(WmtsNamespaces.serviceSOAP);
    			header.setPrefix(WmtsNamespaces.serviceSOAP);
    			soapBody.setPrefix(WmtsNamespaces.serviceSOAP);
    			if (fault != null) 
    			{
    				fault.setPrefix(WmtsNamespaces.serviceSOAP);
    			} 
    		}
       
    		soapMessage.saveChanges();

    		// * Print the request message * /
    		if ( this._debug )
    		{
    			System.out.print("Request SOAP Message = ");
    			soapMessage.writeTo(System.out);
    			System.out.println();
    		}
    	}
    	catch (Exception e)
    	{
    		if ( this._debug )
    		{
    			System.out.println("SOAP Error Message = " +  e.getMessage());
    		}
    		assertTrue(false, "SOAP Error Message = " +  e.getMessage());
    	}

    	return soapMessage;
    }

    // ---
    
    /**
     * Method used to print the SOAP Response
     */
    private void printSOAPResponse(SOAPMessage soapResponse) 
    		//throws Exception
    {
    	try
    	{
    		TransformerFactory transformerFactory = TransformerFactory.newInstance();
    		Transformer transformer = transformerFactory.newTransformer();
    		Source sourceContent = soapResponse.getSOAPPart().getContent();
    		System.out.print("\nResponse SOAP Message = ");
    		StreamResult result = new StreamResult(System.out);
    		transformer.transform(sourceContent, result);
    	}
    	catch (Exception e)
    	{
    		if ( this._debug )
    		{
    			System.out.println("Error when printing SOAPresponse: " + e.getMessage());
    		}
    		assertTrue(false, "Error when printing SOAPresponse: " +  e.getMessage());
    	}
    }

/*---   
    private void parseNodes(Node n, int level)
    {       	
    	if ( n != null)
    	{
    		String nam = n.getNodeName();
    		String val = n.getNodeValue();
    		String lnm = n.getLocalName();
    		
    		for (int i=0; i<level; i++)
    			System.out.print("\t");
    		System.out.println("Node: " + nam + " = " + val);
    		parseNodes(n.getFirstChild(), level+1);
    		
    		parseNodes(n.getNextSibling(), level);
    	}
    }
 ---*/
		
    // --- -------
/*---    
	   private XPath createXPath()
            throws XPathFactoryConfigurationException
	   {
		   XPathFactory factory = XPathFactory.newInstance( XPathConstants.DOM_OBJECT_MODEL );
		   XPath xpath = factory.newXPath();
		   xpath.setNamespaceContext( NS_BINDINGS );
		   return xpath;
	   }
  ---*/	
	
	
}