package ets.wmts10.core.util;

import static org.testng.Assert.assertTrue;

import java.io.IOException;

import javax.xml.namespace.QName;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.MimeHeaders;
import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPConstants;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPFault;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;

import ets.wmts10.core.domain.WMTS_Constants;
import ets.wmts10.core.domain.WmtsNamespaces;

public class WMTS_SOAPcontainer
{
	private SOAPMessage soapMessage = null;
	private SOAPEnvelope soapMessageEnvelope = null;
	private SOAPBody soapMessageBody = null;
	private SOAPPart soapMessagePart = null;
	private SOAPElement soapMessageElementOperation = null;
	
	private SOAPMessage soapResponse = null;
	
	private String soapURL;
	
	private boolean _debug = false;

	// --- 
	
	protected WMTS_SOAPcontainer()
	{
		//create();		
	}
	
	// ---
	
	public WMTS_SOAPcontainer(String function, String soap_URL)
	{
		create( function, soap_URL );		
	}
	
	// ---
	
	public void create(String function, String soap_URL)
	{
		try
		{
			MessageFactory messageFactory = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
			soapMessage = messageFactory.createMessage();
    
			MimeHeaders headers = soapMessage.getMimeHeaders();
			this.soapURL = soap_URL;
			headers.addHeader("SOAPAction", soapURL + "/" + function);

			soapMessagePart = soapMessage.getSOAPPart();

			// --- SOAP Envelope
			soapMessageEnvelope = soapMessagePart.getEnvelope();

			// --- SOAP Body
			soapMessageBody = soapMessageEnvelope.getBody();
    
			QName qnElem = new QName( WmtsNamespaces.WMTS, function);    
			soapMessageElementOperation = soapMessageBody.addChildElement(qnElem);

			this.AddWMTSAttribute(WMTS_Constants.SERVICE_PARAM, WMTS_Constants.SERVICE_TYPE_CODE);
			this.AddWMTSAttribute(WMTS_Constants.VERSION_PARAM, WMTS_Constants.VERSION);		
		
			this.AddNamespace(WmtsNamespaces.serviceOWS, WmtsNamespaces.OWS);
		}
		catch (SOAPException se) 
		{
			System.out.println("Error adding SOAP Namesapce identifier:  " +  se.getMessage());
    		if ( this._debug )
    		{
    			se.printStackTrace();
    		}
    		assertTrue(false, "Error adding SOAP Namesapce identifier:  " +  se.getMessage());
    	}
	}
	
	// ---
	
	public void AddWMTSAttribute(String attribute, String value)
	{
		if ( soapMessageElementOperation != null )
		{
			try 
			{
				QName qAttr = new QName( WmtsNamespaces.WMTS, attribute.toLowerCase() );
				soapMessageElementOperation.addAttribute(qAttr, value);
			}
			catch (SOAPException se) 
			{
				System.out.println("Error adding SOAP Namesapce identifier:  " +  se.getMessage());
        		if ( this._debug )
        		{
        			se.printStackTrace();
        		}
        		assertTrue(false, "Error adding SOAP Namesapce identifier:  " +  se.getMessage());
        	}
		}
	}
	
	// ---
	
	public void AddNamespace(String namespace, String namespaceURL)
	{
		if ( soapMessageElementOperation != null )
		{
			try 
			{
				soapMessageElementOperation.addNamespaceDeclaration(namespace, namespaceURL);
				//soapMessageElementOperation.addNamespaceDeclaration(WmtsNamespaces.serviceOWS, WmtsNamespaces.OWS);
			}
			catch (SOAPException se) 
			{
				System.out.println("Error adding SOAP Namesapce identifier:  " +  se.getMessage());
        		if ( this._debug )
        		{
        			se.printStackTrace();
        		}
        		assertTrue(false, "Error adding SOAP Namesapce identifier:  " +  se.getMessage());
        	}
		}
	}
	
	// ---
	
	public void AddParameter(String namespace, String parameterName, String value)
	{
		if ( soapMessageElementOperation != null )
		{
     		try 
     		{
     			SOAPElement childElement = soapMessageElementOperation.addChildElement(parameterName, namespace);
				childElement.addTextNode(value);
			} 
     		catch (SOAPException se) 
     		{
     			System.out.println("Error adding SOAP Parameter:  " +  se.getMessage());
        		if ( this._debug )
        		{
        			se.printStackTrace();
        		}
        		assertTrue(false, "Error adding SOAP Parameter:  " +  se.getMessage());
			}
		}
	}
	
	// ---
	
	public SOAPMessage getSOAPresponse()
	{
		try
		{			
			// --- Send SOAP Message to SOAP Server

			SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
			SOAPConnection soapConnection = soapConnectionFactory.createConnection();

			this.finalizeSoapMessage();
   		
			// ---  Print the request message 
    		//if ( this._debug )
    		{
    			System.out.print("Request SOAP Message = ");
    			soapMessage.writeTo(System.out);
    			System.out.println();
    		}
			soapResponse = soapConnection.call(soapMessage, soapURL);	
			soapConnection.close();

			// --- Process the SOAP Response
			if ( this._debug )
			{
				this.printSOAPResponse();
			}
		}
		catch (SOAPException se) 
		{
 			System.out.println("Error with SOAP Response:  " +  se.getMessage());
    		if ( this._debug )
    		{
    			se.printStackTrace();
    		}
    		assertTrue(false, "Error with SOAP Response:  " +  se.getMessage());
		}
		catch (IOException ioe)
		{
 			System.out.println("Error writing SOAP message:  " +  ioe.getMessage());
    		if ( this._debug )
    		{
    			ioe.printStackTrace();
    		}
    		assertTrue(false, "Error writing SOAP message:  " +  ioe.getMessage());
		}
		return soapResponse;
	}
	
	// --- --------

    // ---
	
	private void finalizeSoapMessage()
	{
		// -- clean up default settings (not sure if meaningful or not)
		try
		{
			SOAPHeader header = soapMessage.getSOAPHeader();
			SOAPFault fault = soapMessageBody.getFault();
			soapMessageEnvelope.removeNamespaceDeclaration(soapMessageEnvelope.getPrefix());
			soapMessageEnvelope.addNamespaceDeclaration(WmtsNamespaces.serviceSOAP, WmtsNamespaces.SOAP);
			soapMessageEnvelope.setPrefix(WmtsNamespaces.serviceSOAP);
			header.setPrefix(WmtsNamespaces.serviceSOAP);
			soapMessageBody.setPrefix(WmtsNamespaces.serviceSOAP);
			if (fault != null) 
			{
				fault.setPrefix(WmtsNamespaces.serviceSOAP);
			}
			soapMessage.saveChanges();
		}
		catch (SOAPException se) 
		{
			System.out.println("Completing SOAP message construct Error = " +  se.getMessage());
     		if ( this._debug )
     		{
     			se.printStackTrace();
        	}
     		assertTrue(false, "Completing SOAP message construct Error = " +  se.getMessage());
		}		
	}
    
	// ---
    /**
     * Method used to print the SOAP Response
     */
    private void printSOAPResponse() 
    {
    	try
    	{
    		TransformerFactory transformerFactory = TransformerFactory.newInstance();
    		Transformer transformer = transformerFactory.newTransformer();
    		Source sourceContent = soapResponse.getSOAPPart().getContent();
    		System.out.print("\nResponse SOAP Message = ");
    		StreamResult result = new StreamResult(System.out);
    		transformer.transform(sourceContent, result);
    	}
    	catch (Exception e)
    	{
    		System.out.println("Error when printing SOAPresponse: " + e.getMessage());
    		if ( this._debug )
    		{
    			e.printStackTrace();
    		}
    		assertTrue(false, "Error when printing SOAPresponse: " +  e.getMessage());
    	}
    }

	// ---	
	
}
