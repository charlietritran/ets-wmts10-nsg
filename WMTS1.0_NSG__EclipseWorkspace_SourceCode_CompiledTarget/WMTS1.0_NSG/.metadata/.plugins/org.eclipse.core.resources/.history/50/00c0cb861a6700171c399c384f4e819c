package ets.wmts10.core.util;

import static org.testng.Assert.assertTrue;

import javax.xml.namespace.QName;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.MimeHeaders;
import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPConstants;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPFault;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;

import ets.wmts10.core.domain.WMTS_Constants;
import ets.wmts10.core.domain.WmtsNamespaces;

public class WMTS_SOAPcontainer
{
	private SOAPMessage soapMessage = null;
	private SOAPEnvelope soapMessageEnvelope = null;
	private SOAPBody soapMessageBody = null;
	private SOAPPart soapMessagePart = null;
	private SOAPElement soapMessageElementOperation = null;
	
	private SOAPMessage soapResponse = null;

	// --- 
	
	public WMTS_SOAPcontainer()
	{
		create();		
	}
	
	// ---
	
	public void create()
	{
		if ( soapMessage != null )
		{
			soapMessage = null;
		}
		if ( soapResponse != null )
		{
			soapResponse = null;
		}
		
		
		
		SOAPMessage soapMessage = createSOAPRequest(soapURIstr, layerName, requestFormat, style, tileMatrixSet, tileMatrix, tileRow, tileCol);

		// --- Send SOAP Message to SOAP Server

		SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
		SOAPConnection soapConnection = soapConnectionFactory.createConnection();

		
		
		
		
		
		
		
		
		try
		{			
			soapResponse = soapConnection.call(soapMessage, soapURIstr);
		}
		finally
		{
			soapConnection.close();
		}

		// --- Process the SOAP Response

		if ( this._debug )
		{
			printSOAPResponse(soapResponse);
		}
		
		
		
		
		//return soapMessage;
	}
	
	// ---
	
	public void AddWMTSAttribute(String attribute, String value)
	{
		if ( soapMessageElementOperation != null )
		{
			try 
			{
				QName qAttr = new QName( WmtsNamespaces.WMTS, attribute.toLowerCase() );
				soapMessageElementOperation.addAttribute(qAttr, value);
			}
			catch (SOAPException se) 
			{
				System.out.println("Error adding SOAP Namesapce identifier:  " +  se.getMessage());
     			/*--
        		if ( this._debug )
        		{
        			e.printStackTrace();
        		}
        		--*/
        		assertTrue(false, "Error adding SOAP Namesapce identifier:  " +  se.getMessage());
        	}
		}
	}
	
	// ---
	
	public void AddNamespace(String namespace, String namespaceURL)
	{
		if ( soapMessageElementOperation != null )
		{
			try 
			{
				soapMessageElementOperation.addNamespaceDeclaration(namespaceURL, namespace);
			}
			catch (SOAPException se) 
			{
				System.out.println("Error adding SOAP Namesapce identifier:  " +  se.getMessage());
     			/*--
        		if ( this._debug )
        		{
        			e.printStackTrace();
        		}
        		--*/
        		assertTrue(false, "Error adding SOAP Namesapce identifier:  " +  se.getMessage());
        	}
		}
	}
	
	// ---
	
	public void AddParameter(String namespace, String parameterName, String value)
	{
		if ( soapMessageElementOperation != null )
		{
     		try 
     		{
     			SOAPElement childElement = soapMessageElementOperation.addChildElement(parameterName, namespace);
				childElement.addTextNode(value);
			} 
     		catch (SOAPException se) 
     		{
     			System.out.println("Error adding SOAP Parameter:  " +  se.getMessage());
     			/*--
        		if ( this._debug )
        		{
        			e.printStackTrace();
        		}
        		--*/
        		assertTrue(false, "Error adding SOAP Parameter:  " +  se.getMessage());
			}
		}
	}
	
	// --- --------
	
    private SOAPMessage createSOAPRequest(String url, String layerName, String format, String style, String tileMatrixSet, String tileMatrix, String tileRow, String tileCol) 
    {
    	SOAPMessage soapMessage = null;
    	
    	try
    	{
    		MessageFactory messageFactory = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
    		soapMessage = messageFactory.createMessage();
        
    		MimeHeaders headers = soapMessage.getMimeHeaders();
    		headers.addHeader("SOAPAction", url + "/" + function);

    		SOAPPart soapPart = soapMessage.getSOAPPart();

    		// --- SOAP Envelope
    		SOAPEnvelope soapEnvelope = soapPart.getEnvelope();

    		// --- SOAP Body
    		SOAPBody soapBody = soapEnvelope.getBody();
        

    		QName qnAttr = new QName( WmtsNamespaces.WMTS, WMTS_Constants.SERVICE_PARAM.toLowerCase() );
    		QName qvAttr = new QName( WmtsNamespaces.WMTS, WMTS_Constants.VERSION_PARAM.toLowerCase() );
    		QName qnElem = new QName( WmtsNamespaces.WMTS, function);
        
    		SOAPElement elemOperation = soapBody.addChildElement(qnElem);
    		//SOAPElement elemAttr = 
    		elemOperation.addAttribute(qnAttr, WMTS_Constants.SERVICE_TYPE_CODE);
    		elemOperation.addAttribute(qvAttr, WMTS_Constants.VERSION);

     		elemOperation.addNamespaceDeclaration(WmtsNamespaces.serviceOWS, WmtsNamespaces.OWS);
    		
     		SOAPElement elemOperationLayer = elemOperation.addChildElement(WMTS_Constants.LAYER_PARAM, WmtsNamespaces.serviceOWS);
     		elemOperationLayer.addTextNode(layerName);
     		
     		SOAPElement elemOperationStyle = elemOperation.addChildElement(WMTS_Constants.STYLE_PARAM, WmtsNamespaces.serviceOWS);
     		elemOperationStyle.addTextNode(style);
     		
     		SOAPElement elemOperationFormat = elemOperation.addChildElement(WMTS_Constants.FORMAT_PARAM, WmtsNamespaces.serviceOWS);
     		elemOperationFormat.addTextNode(format);
     		
     		SOAPElement elemOperationTileMatrixSet = elemOperation.addChildElement(WMTS_Constants.TILE_MATRIX_SET_PARAM, WmtsNamespaces.serviceOWS);
     		elemOperationTileMatrixSet.addTextNode(tileMatrixSet);
     		
     		SOAPElement elemOperationTileMatrix = elemOperation.addChildElement(WMTS_Constants.TILE_MATRIX_PARAM, WmtsNamespaces.serviceOWS);
     		elemOperationTileMatrix.addTextNode(tileMatrix);
     		
     		SOAPElement elemOperationTileRow = elemOperation.addChildElement(WMTS_Constants.TILE_ROW_PARAM, WmtsNamespaces.serviceOWS);
     		elemOperationTileRow.addTextNode(tileRow);
     		
     		SOAPElement elemOperationTileColumn = elemOperation.addChildElement(WMTS_Constants.TILE_COL_PARAM, WmtsNamespaces.serviceOWS);
     		elemOperationTileColumn.addTextNode(tileCol);
     		
 

    		// ---  Print the request message 
    		
    		if ( this._debug )
    		{
    			System.out.print("Request SOAP Message = ");
    			soapMessage.writeTo(System.out);
    			System.out.println();
    		}
    		
    	}
    	catch (Exception e)
    	{
   			System.out.println("SOAP Error Message = " +  e.getMessage());
    		if ( this._debug )
    		{
    			e.printStackTrace();
    		}
    		assertTrue(false, "SOAP Error Message = " +  e.getMessage());
    	}

    	return soapMessage;
    }

    // ---
	
	private void finalizeSoapMessage()
	{
		// -- clean up default settings (not sure if meaningful or not)
		try
		{
			SOAPHeader header = soapMessage.getSOAPHeader();
			SOAPFault fault = soapMessageBody.getFault();
			soapMessageEnvelope.removeNamespaceDeclaration(soapMessageEnvelope.getPrefix());
			soapMessageEnvelope.addNamespaceDeclaration(WmtsNamespaces.serviceSOAP, WmtsNamespaces.SOAP);
			soapMessageEnvelope.setPrefix(WmtsNamespaces.serviceSOAP);
			header.setPrefix(WmtsNamespaces.serviceSOAP);
			soapMessageBody.setPrefix(WmtsNamespaces.serviceSOAP);
			if (fault != null) 
			{
				fault.setPrefix(WmtsNamespaces.serviceSOAP);
			}
			soapMessage.saveChanges();
		}
		catch (SOAPException se) 
		{
			System.out.println("Completing SOAP message construct Error = " +  se.getMessage());
     			/*--
        		if ( this._debug )
        		{
        			e.printStackTrace();
        		}
        		--*/
			assertTrue(false, "Completing SOAP message construct Error = " +  se.getMessage());
		}		
	}
    
    /**
     * Method used to print the SOAP Response
     */
    private void printSOAPResponse() 
    {
    	try
    	{
    		TransformerFactory transformerFactory = TransformerFactory.newInstance();
    		Transformer transformer = transformerFactory.newTransformer();
    		Source sourceContent = soapResponse.getSOAPPart().getContent();
    		System.out.print("\nResponse SOAP Message = ");
    		StreamResult result = new StreamResult(System.out);
    		transformer.transform(sourceContent, result);
    	}
    	catch (Exception e)
    	{
    		System.out.println("Error when printing SOAPresponse: " + e.getMessage());
    		if ( this._debug )
    		{
    			e.printStackTrace();
    		}
    		assertTrue(false, "Error when printing SOAPresponse: " +  e.getMessage());
    	}
    }

	
	
	
}
