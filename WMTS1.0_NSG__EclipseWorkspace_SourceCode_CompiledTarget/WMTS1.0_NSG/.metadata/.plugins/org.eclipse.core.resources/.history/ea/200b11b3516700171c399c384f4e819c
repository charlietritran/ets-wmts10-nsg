package ets.wmts10.core.util;

import static org.testng.Assert.assertFalse;
import static org.testng.Assert.assertTrue;

import java.net.URI;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.xml.bind.DatatypeConverter;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import javax.xml.xpath.XPathFactoryConfigurationException;

import org.joda.time.DateTime;
import org.joda.time.Period;
import org.joda.time.format.ISOPeriodFormat;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import de.latlon.ets.core.util.NamespaceBindings;
import de.latlon.ets.core.util.TestSuiteLogger;

import ets.wmts10.core.domain.BoundingBox;
import ets.wmts10.core.domain.Dimension;
import ets.wmts10.core.domain.LayerInfo;
import ets.wmts10.core.domain.ProtocolBinding;
import ets.wmts10.core.domain.WmtsNamespaces;

import ets.wmts10.core.domain.dimension.DimensionUnitValue;
import ets.wmts10.core.domain.dimension.RequestableDimension;
import ets.wmts10.core.domain.dimension.RequestableDimensionList;
import ets.wmts10.core.domain.dimension.date.DateTimeDimensionInterval;
import ets.wmts10.core.domain.dimension.date.DateTimeRequestableDimension;
import ets.wmts10.core.domain.dimension.number.NumberDimensionInterval;
import ets.wmts10.core.domain.dimension.number.NumberRequestableDimension;


/**
 * Provides various utility methods for accessing service metadata.
 * 
 * @author <a href="mailto:goltz@lat-lon.de">Lyn Goltz</a>
 */
public final class ServiceMetadataUtils {

    private static final Logger LOGR = Logger.getLogger(ServiceMetadataUtils.class.getName());
    private static final NamespaceBindings NS_BINDINGS = WmtsNamespaces.withStandardBindings();

    private ServiceMetadataUtils() {
    }

    /**
     * Extracts a request endpoint from a WMTS capabilities document. If the request URI contains a query component it is
     * removed (but not from the source document).
     * 
     * @param wmtsMetadata
     *            the document node containing service metadata (OGC capabilities document).
     * @param opName
     *            the operation (request) name
     * @param binding
     *            the message binding to use (if {@code null} any supported binding will be used)
     * @return the URI referring to a request endpoint, <code>null</code> if no matching endpoint is found
     */
    public static URI getOperationEndpoint_KVP( final Document wmtsMetadata, String opName, ProtocolBinding binding ) 
    {
        return getOperationEndpoint( wmtsMetadata, binding, "KVP", opName);
    }

    public static URI getOperationEndpoint_REST( final Document wmtsMetadata, String opName, ProtocolBinding binding ) 
    {
        return getOperationEndpoint( wmtsMetadata, binding, "RESTful", opName);
    }
    
    public static URI getOperationEndpoint_SOAP( final Document wmtsMetadata, String opName, ProtocolBinding binding ) 
    {
        return getOperationEndpoint( wmtsMetadata, binding, "SOAP", opName);
    }
    
    private static URI getOperationEndpoint( final Document wmtsMetadata, ProtocolBinding binding, String protocol, String opName ) 
    {
        if (( binding == null ) || binding.equals( ProtocolBinding.ANY ) )
        {
            binding = getOperationBindings( wmtsMetadata, opName ).iterator().next();
        }
        if ( binding == null )
            return null;

        String xPathExpr = String.format("//ows:OperationsMetadata/ows:Operation[@name = '%s']/ows:DCP/ows:HTTP/ows:%s", opName, binding.getElementName() );
        
        String href = null;
        XPath xPath = createXPath();
        try 
        {
        	NodeList nodes = getNodeElements(wmtsMetadata, xPathExpr );
        	
        	for (int i = 0; ((i < nodes.getLength()) && (href == null)); i++)
        	{
        		Node node = nodes.item(i);
        		
        		NodeList nodeValueList = getNodeElements( xPath, node, "./ows:Constraint/ows:AllowedValues/ows:Value");
        		
        		for (int nodeValueIndx=0; nodeValueIndx<nodeValueList.getLength(); nodeValueIndx++)
        		{
        			String value = (String) xPath.evaluate(".", nodeValueList.item(nodeValueIndx), XPathConstants.STRING);
        			if (( value != null ) && ( value != "" ) && value.equals(protocol))
        			{
        				href = (String) createXPath().evaluate( "@xlink:href", node, XPathConstants.STRING );
        				break;
        			}
        		}
        	}
        }
        catch ( XPathExpressionException ex )
        {
            TestSuiteLogger.log( Level.INFO, ex.getMessage() );
        }
        assertTrue(href != "", "No "+ protocol + " support for " + opName);

        return createEndpoint( href );
    }
    
    
    /**
     * Determines which protocol bindings are supported for a given operation.
     * 
     * @param wmtsMetadata
     *            the capabilities document (wmts:Capabilities), never <code>null</code>
     * @param opName
     *            the name of the WMTS operation
     * @return A Set of protocol bindings supported for the operation. May be empty but never <code>null</code>.
     */
    public static Set<ProtocolBinding> getOperationBindings( final Document wmtsMetadata, String opName ) 
    {
        Set<ProtocolBinding> protoBindings = new HashSet<>();

        if ( isOperationBindingSupported( wmtsMetadata, opName, ProtocolBinding.GET ) )
            protoBindings.add( ProtocolBinding.GET );
        if ( isOperationBindingSupported( wmtsMetadata, opName, ProtocolBinding.POST ) )
            protoBindings.add( ProtocolBinding.POST );

        return protoBindings;
    }

    // ---
    
    public static NodeList getNodeElements( XPath xPath, Node wmtsCapabilities, String xPathAbstract )
                    throws XPathExpressionException 
    {
    	if ( xPath == null )
    		xPath = createXPath();
        return (NodeList) xPath.evaluate( xPathAbstract, wmtsCapabilities, XPathConstants.NODESET );
    }

    // ---
    
    public static NodeList getNodeElements( Node wmtsCapabilities, String xPathAbstract )
                    throws XPathExpressionException 
    {
        return getNodeElements(null, wmtsCapabilities, xPathAbstract );
    }

    // ---
    
    public static Node getNode( XPath xPath, Node wmtsCapabilities, String xPathAbstract )
            throws XPathExpressionException 
    {
    	if ( xPath == null )
    		xPath = createXPath();
    	return (Node) xPath.evaluate( xPathAbstract, wmtsCapabilities, XPathConstants.NODE );
    }

    // ---

    public static Node getNode( Node wmtsCapabilities, String xPathAbstract )
            throws XPathExpressionException 
    {
    	return getNode(null, wmtsCapabilities, xPathAbstract );
    }

    // ---
    
    public static String getNodeText( XPath xPath, Node wmtsCapabilities, String xPathAbstract )
            throws XPathExpressionException 
    {
    	if ( xPath == null )
    		xPath = createXPath();
    	return (String) xPath.evaluate( xPathAbstract, wmtsCapabilities, XPathConstants.STRING );
    }

    // ---

    public static String getNodeText( Node wmtsCapabilities, String xPathAbstract )
            throws XPathExpressionException 
    {
    	return getNodeText(null, wmtsCapabilities, xPathAbstract );
    }

    // ---

 
    // ---

    /**
     * Parses the configured formats for the given operation.
     * 
     * @param wmtsCapabilities
     *            the capabilities document (wmts:Capabilities), never <code>null</code>
     * @param layerName
     *            the name of the selected layer
     * @param childElement
     *            the child element(s) of the layer
     * @return a list of the child elements by the operation, never <code>null</code>
     */
    
    public static NodeList parseLayerChildElements( Document wmtsCapabilities, String layerName, String childElement ) 
    {
    	if ( !childElement.startsWith("ows:") && !childElement.startsWith("wmts:"))
    		childElement = "wmts:" + childElement;		// --- apply default namespace if none given
    	
		String xPathExpr = "//wmts:Contents/wmts:Layer[ows:Identifier = '" + layerName + "']/" + childElement;
        try 
        {
            return getNodeElements(wmtsCapabilities, xPathExpr );
        } 
        catch ( XPathExpressionException ex )
        {
            TestSuiteLogger.log( Level.INFO, ex.getMessage() );
        }
        return null;
    }
    
    // ---
     
    // ---

    /**
     * Parses all named layers from the capabilities document.
     * 
     * @param wmtsCapabilities
     *            the capabilities document (wmts:Capabilities), never <code>null</code>
     * @return a list of {@link LayerInfo}s supported by the WMTS, never <code>null</code>
     */
    public static List<LayerInfo> parseLayerInfo( Document wmtsCapabilities )
    {
        ArrayList<LayerInfo> layerInfos = new ArrayList<>();
        XPath xPath = createXPath();
        try
        {
            NodeList layerNodes = parseLayers( xPath, wmtsCapabilities );

            for ( int layerNodeIndex = 0; layerNodeIndex < layerNodes.getLength(); layerNodeIndex++ ) 
            {
                Node layerNode = layerNodes.item( layerNodeIndex );
                LayerInfo layerInfo = parseLayerInfo( xPath, layerNode );
                layerInfos.add( layerInfo );
            }
        }
        catch ( XPathExpressionException xpe )
        {
            throw new RuntimeException( "Error evaluating XPath expression against capabilities doc. ", xpe );
        }
        catch ( ParseException e )
        {
            throw new RuntimeException( "Error parsing layer infos from doc. ", e );
        }
   
        return layerInfos;
    }
    
    // --- 
    
    public static NodeList parseLayers( XPath xPath, Document wmtsCapabilities ) 
    {
        try 
        {
        	return getNodeElements(xPath, wmtsCapabilities, "//wmts:Contents/wmts:Layer" );      
        } 
        catch ( XPathExpressionException xpe )
        {
            throw new RuntimeException( "Error collecting layers from the Service Metadata Capabilities doc. ", xpe );
        }
//        return null;
    }
    
    // --- 
    
    public static NodeList parseLayers( Document wmtsCapabilities ) 
    {
        return parseLayers(createXPath(), wmtsCapabilities );
    }
    
    // --- 

    public static String parseNodeElementName(XPath xPath, Node nodeElement)
    		  throws XPathExpressionException
    {
   		if ( xPath == null )
   			xPath = createXPath();
   		return (String) xPath.evaluate( "ows:Identifier", nodeElement, XPathConstants.STRING );
    }
    
    // --- 

    public static String parseNodeElementName( Node nodeElement)
    		  throws XPathExpressionException
    {
   		return parseNodeElementName(createXPath(), nodeElement);
    }
    
	/*--
    private static void parseNodes(Node n)
    {
       	
    	if ( n != null)
    	{
    		String nam = n.getNodeName();
    		String val = n.getNodeValue();
    		String lnm = n.getLocalName();
    		
    		parseNodes(n.getFirstChild());
    		
    		parseNodes(n.getNextSibling());
    	}
    }
  	--*/
    
    /**
     * Parses the updateSequence value from the capabilities document.
     * 
     * @param wmtsCapabilities
     *            the capabilities document (wmts:Capabilities), never <code>null</code>
     * @return the value of the {@link ServiceMetadataUtils} attribute, <code>null</code> if the attribute is missing or
     *         the value empty
     */
     /*--
   public static String parseUpdateSequence( Document wmtsCapabilities )
    {
        try
        {
/ *-* /            String layerExpr = "//wmts:Capabilities/@updateSequence ";
            XPath xPath = createXPath();
            String updateSequence = (String) xPath.evaluate( layerExpr, wmtsCapabilities, XPathConstants.STRING );
            return updateSequence == null || updateSequence.isEmpty() ? null : updateSequence;
        } 
        catch ( XPathExpressionException xpe )
        {
            throw new RuntimeException( "Error evaluating XPath expression against capabilities doc. ", xpe );
        }
    }
--*/
    /**
     * Parses the BoundingBox from the layer; either as the WGS84 Bbox, or one of the other listed ones
     * 
     * @param layerNode
     *            node of the layer, never <code>null</code>
     *            wgs84 if parsing the WGS84 bounding box
     * @return the {@link BoundingBox} - crs is CRS:84 if wgs84 is true, otherwise parse from attribute
     */
    public static BoundingBox parseBoundingBox( Node bboxNode, boolean presumedWGS84 ) 
    {
        XPath xPath = createXPath();
        
        String crsID = "";
        BoundingBox bbox = null;
        try 
        {
            NodeList coordsList = (NodeList)bboxNode.getChildNodes();
            if ( coordsList.getLength() > 0 )
            {
            	Node cornerCoordNode = (Node) xPath.evaluate("//ows:LowerCorner", bboxNode, XPathConstants.NODE);
           		double[] lowerCoords = asDoublePair(bboxNode, cornerCoordNode.getNodeName(), xPath );
            		
            	cornerCoordNode = (Node) xPath.evaluate("//ows:UpperCorner", bboxNode, XPathConstants.NODE);
           		double[] upperCoords = asDoublePair(bboxNode, cornerCoordNode.getNodeName(), xPath );
            		
        	 	String crsStr = ((String) xPath.evaluate( "@crs", bboxNode, XPathConstants.STRING )).toUpperCase();
        	 	
            	if ( presumedWGS84 )
            	{
            		crsID = "CRS:84";
            		if ( crsStr.contains("EPSG:"))            	 	
            	 	{
            			crsID = "EPSG:4326";
            	 	}
            	}
            	else
            	{                	
            	    // crs="urn:ogc:def:crs:EPSG::3857"
            	 	if ( crsStr.contains("EPSG:"))            	 	
            	 	{	
            	 		int indx = crsStr.indexOf("EPSG:");
            	 		crsID = crsStr.substring(indx).replace("::", ":");
            	 	}
            	 	else if ( crsStr.contains("CRS:") )
            	 	{
            	 		int indx = crsStr.indexOf("CRS:");
            	 		crsID = crsStr.substring(indx).replace("::", ":");
            	 	}
            	 	assertFalse(crsID.equals(""), "Unknown CRS: " + crsStr);
            	}            		
            	bbox = new BoundingBox(crsID, lowerCoords[0], lowerCoords[1], upperCoords[0], upperCoords[1]);
            }            
           assertTrue(bbox != null, String.format("Could not parse %s Bounding Box", crsID ));
            
            return bbox;
        }
        catch ( XPathExpressionException xpe )
        {
            throw new RuntimeException(
                  "Error evaluating XPath expression against capabilities doc while parsing geographic BBOX of layer. ", xpe );
        }
    }

    /**
     * Parses all Layer elements of a capabilities document.
     * 
     * @param wmtsCapabilities
     *            capabilities document, never <code>null</code>
     * @return node list containing all layer elements of the capabilities document
     * @throws XPathFactoryConfigurationException
     * @throws XPathExpressionException
     */
/*--    
    public static NodeList parseAllLayerNodes( Document wmtsCapabilities )
                    throws XPathFactoryConfigurationException, XPathExpressionException 
    {
        String xPathAbstract = "//ows:Layer";
        return createNodeList( wmtsCapabilities, xPathAbstract );
    }
--*/    
    /**
     * Parses all requestable Layer elements of a capabilities document. Requestable layers are identified by the
     * existence of a Name sub element.
     * 
     * @param wmtsCapabilities
     *            capabilities document, never <code>null</code>
     * @return node list containing all requestable layer elements of the capabilities document
     * @throws XPathFactoryConfigurationException
     * @throws XPathExpressionException
     */
/*--    
    public static NodeList parseRequestableLayerNodes( Document wmtsCapabilities )
                    throws XPathFactoryConfigurationException, XPathExpressionException
    {
        String xPathAbstract = "//ows:Layer[ows:Name]";
        return createNodeList( wmtsCapabilities, xPathAbstract );
    }
--*/    

    // --- 

    public static RequestableDimension parseRequestableDimension( String units, String value )
                    throws ParseException
    {
        if ( value.contains( "," ) )
        {
            return parseListRequestableDimension( units, value );
        }
        return parseSingleRequestableDimension( units, value );
    }
    
    // ---
    
    private static RequestableDimension parseListRequestableDimension( String units, String value )
                    throws ParseException {
        List<RequestableDimension> requestableDimensions = new ArrayList<>();
        String[] singleValues = value.split( "," );
        for ( String singleValue : singleValues ) {
            requestableDimensions.add( parseSingleRequestableDimension( units, singleValue ) );
        }
        return new RequestableDimensionList( requestableDimensions );
    }
    
    // ---
    
    private static RequestableDimension parseSingleRequestableDimension( String units, String singleValue )
                    throws ParseException 
    {
        if ( singleValue.contains( "/" ) )
        {
            return parseInterval( units, singleValue );
        }
        return parseSingleValue( units, singleValue );
    }

    // ---

    private static RequestableDimension parseInterval( String units, String token )
                    throws ParseException {
        LOGR.fine(String.format("Parsing temporal interval with units %s: %s", units, token));
        String[] minMaxRes = token.split( "/" );
        if ( "ISO8601".equals( units ) )
        {
            DateTime min = parseDateTime( minMaxRes[0] );
            DateTime max = parseDateTime( minMaxRes[1] );
            String period = (minMaxRes.length > 2) ? minMaxRes[2] : "";
            Period resolution = parseResolution( period );
            return new DateTimeDimensionInterval( min, max, resolution );
        }
        Number min = parseNumber( minMaxRes[0] );
        Number max = parseNumber( minMaxRes[1] );
        Number resolution = parseNumber( minMaxRes[2] );
        return new NumberDimensionInterval( min, max, resolution );
    }

    // ---

    private static Period parseResolution( String resolution ) {
        if ( "0".equals( resolution ) || resolution.isEmpty())
            return null;
        return ISOPeriodFormat.standard().parsePeriod( resolution );
    }

    // ---
    
    private static RequestableDimension parseSingleValue( String units, String value )
                    throws ParseException {
        if ( "ISO8601".equals( units ) )
        {
            DateTime dateTime = parseDateTime( value );
            return new DateTimeRequestableDimension( dateTime );
        }
        Number number = parseNumber( value );
        return new NumberRequestableDimension( number );
    }

    // ---
    
    private static Number parseNumber( String token )
                    throws ParseException
    {
        NumberFormat instance = NumberFormat.getInstance( Locale.ENGLISH );
        instance.setParseIntegerOnly( false );
        return instance.parse( token );
    }

    // ---

    private static DateTime parseDateTime( String token )
    {
        Calendar dateTime = DatatypeConverter.parseDateTime( token );
        return new DateTime( dateTime.getTimeInMillis() );
    }

    // ---
    
    private static LayerInfo parseLayerInfo( XPath xPath, Node layerNode )
                    throws XPathExpressionException, ParseException
    {
        String layerName = parseNodeElementName(xPath, layerNode);
//        boolean isQueryable = parseQueryable( xPath, layerNode );
        List<BoundingBox> bboxes = parseBoundingBoxes( xPath, layerNode );
        BoundingBox wgs84BBox = parseWGS84BoundingBox( xPath, layerNode );
        List<Dimension> dimensions = parseDimensions( xPath, layerNode );
        return new LayerInfo( layerName, /*--isQueryable, --*/ bboxes, dimensions, wgs84BBox );
    }
    
    /*--
    private static boolean parseQueryable( XPath xPath, Node layerNode )
                            throws XPathExpressionException {
        String queryableAttribute = (String) xPath.evaluate( "@queryable", layerNode, XPathConstants.STRING );
        return queryableAttribute != null &&
               ( "1".equals( queryableAttribute ) ? true : false || Boolean.parseBoolean( queryableAttribute ) );
    }
	--*/
    
    private static List<BoundingBox> parseBoundingBoxes( XPath xPath, Node layerNode )
                    throws XPathExpressionException 
    {
        Map<String, BoundingBox> bboxes = new HashMap<>();
        String bboxesExpr = "ancestor-or-self::wmts:Layer/ows:BoundingBox";
        NodeList bboxNodes = getNodeElements(xPath, layerNode, bboxesExpr );
        for ( int bboxNodeIndex = 0; bboxNodeIndex < bboxNodes.getLength(); bboxNodeIndex++ )
        {
            Node bboxNode = bboxNodes.item( bboxNodeIndex );
            BoundingBox bbox = parseBoundingBox( bboxNode, false );
            bboxes.put( bbox.getCrs(), bbox );
        }
        return new ArrayList<>( bboxes.values() );
    }
    
    // ---
    
    private static BoundingBox parseWGS84BoundingBox( XPath xPath, Node layerNode )
            throws XPathExpressionException 
    {
    	String bboxExpr = "ancestor-or-self::wmts:Layer/ows:WGS84BoundingBox";
    	Node bboxNode = (Node) xPath.evaluate( bboxExpr, layerNode, XPathConstants.NODE );

    	BoundingBox bbox = parseBoundingBox( bboxNode, true );

    	return bbox;
    }
    
    // ---

    private static List<Dimension> parseDimensions( XPath xPath, Node layerNode )
                    throws XPathExpressionException, ParseException
    {
        ArrayList<Dimension> dimensions = new ArrayList<>();
        String dimensionExpr = "ows:Dimension";
        NodeList dimensionNodes = getNodeElements( xPath, layerNode, dimensionExpr );
        for ( int dimensionNodeIndex = 0; dimensionNodeIndex < dimensionNodes.getLength(); dimensionNodeIndex++ ) 
        {
            Node dimensionNode = dimensionNodes.item( dimensionNodeIndex );
            Dimension dimension = parseDimension( xPath, dimensionNode );
            if ( dimension != null )
                dimensions.add( dimension );
        }
        return dimensions;
    }
    
/*--
    private static BoundingBox parseBoundingBox( Node bboxNode )
                    throws XPathExpressionException {
        XPath xPath = createXPath();
        double minx = asDouble( bboxNode, "@minx", xPath );
        double miny = asDouble( bboxNode, "@miny", xPath );
        double maxx = asDouble( bboxNode, "@maxx", xPath );
        double maxy = asDouble( bboxNode, "@maxy", xPath );
        String crs = (String) xPath.evaluate( "@CRS", bboxNode, XPathConstants.STRING );
        return new BoundingBox( crs, minx, miny, maxx, maxy );
    }
--*/
    private static Dimension parseDimension( XPath xPath, Node dimensionNode )
                    throws XPathExpressionException, ParseException {
        String name = (String) xPath.evaluate( "@name", dimensionNode, XPathConstants.STRING );
        if ( name != null ) {
            String units = (String) xPath.evaluate( "@units", dimensionNode, XPathConstants.STRING );
            String value = (String) xPath.evaluate( "text()", dimensionNode, XPathConstants.STRING );
            RequestableDimension requestableDimension = parseRequestableDimension( units, value );
            DimensionUnitValue unitValue = new DimensionUnitValue( units, requestableDimension );
            return new Dimension( name, unitValue );
        }
        return null;
    }
    
    //--------
    
    private static double asDouble( Node node, String xPathExpr, XPath xPath )
                    throws XPathExpressionException 
    {
        String content = (String) xPath.evaluate( xPathExpr, node, XPathConstants.STRING );
        return Double.parseDouble( content );
    }
    
    //--------
    
    private static double[] asDoublePair( Node node, String xPathExpr, XPath xPath )
            throws XPathExpressionException 
    {
    	String content = (String) xPath.evaluate( xPathExpr, node, XPathConstants.STRING );
    	
    	int indx = content.indexOf(' ');
    	if ( indx < 0 )
    		indx = content.indexOf(',');
    	
    	String content0 = (String)content.substring(0, indx);
    	String content1 = (String)content.substring(indx+1);
    	
    	double[] pair = new double[2];
    	pair[0] = Double.parseDouble( content0 );
    	pair[1] = Double.parseDouble( content1 );
    	
    	return pair;
    }

    // --- 

    private static boolean isOperationBindingSupported( Document wmtsMetadata, String opName, ProtocolBinding binding )
    {
        String exprTemplate = "count(/wmts:Capabilities/ows:Capability/ows:Request/ows:%s/ows:DCPType/ows:HTTP/ows:%s)";
        String xPathExpr = String.format( exprTemplate, opName, binding.getElementName() );
        try {
            XPath xPath = createXPath();
            Double bindings = (Double) xPath.evaluate( xPathExpr, wmtsMetadata, XPathConstants.NUMBER );
            if ( bindings > 0 ) {
                return true;
            }
        } catch ( XPathExpressionException xpe ) {
            throw new RuntimeException( "Error evaluating XPath expression against capabilities doc. ", xpe );
        }
        return false;
    }

    // --- 
    
    private static URI createEndpoint( String href )
    {
        if ( href == null || href.isEmpty() )
            return null;
        URI endpoint = URI.create( href );
        if ( null != endpoint.getQuery() )
        {
            String uri = endpoint.toString();
            endpoint = URI.create( uri.substring( 0, uri.indexOf( '?' ) ) );
        }
        return endpoint;
    }

    // --- 
    /*--
    private static NodeList createNodeList( Document wmtsCapabilities, String xPathAbstract )
                    throws XPathExpressionException 
    {
        XPath xpath = createXPath();
        return (NodeList) xpath.evaluate( xPathAbstract, wmtsCapabilities, XPathConstants.NODESET );
    }
--*/    
    // --- 

    private static XPath createXPath()
    {
        XPath xPath = XPathFactory.newInstance().newXPath();
        xPath.setNamespaceContext( NS_BINDINGS );
        return xPath;
    }

/*--    
    public static URI getSoapOperationEndpoint( Document wmtsCapabilities, String operation )
    {
        if ( isSoapSupported( wmtsCapabilities, operation ) ) {
            String href = parseSoapEndpoint( wmtsCapabilities );
            return createEndpoint( href );
        }
        return null;
    }

    private static String parseSoapEndpoint( Document wmtsCapabilities )
    {
        final String xPathExpr = "//wmts:Capabilities/ows:Capability/soapwmts:ExtendedCapabilities/soapwmts:SOAP/ows:OnlineResource/@xlink:href";
        String href = null;
        try 
        {
            XPath xPath = createXPath();
            href = xPath.evaluate( xPathExpr, wmtsCapabilities );
        }
        catch ( XPathExpressionException ex )
        {
            TestSuiteLogger.log( Level.INFO, ex.getMessage() );
        }
        return href;
    }

    private static boolean isSoapSupported( Document wmtsCapabilities, String operation ) 
    {
        final String exprTemplate = "//wmts:Capabilities/ows:Capability/soapwmts:ExtendedCapabilities/soapwmts:SOAP/soapwmts:SupportedOperations/soapwmts:Operation[@name='%s']";
        String xPathExpr = String.format( exprTemplate, operation );
        XPath xPath = createXPath();
        try {
            return (Boolean) xPath.evaluate( xPathExpr, wmtsCapabilities, XPathConstants.BOOLEAN );
        } catch ( XPathExpressionException xpe ) {
            throw new RuntimeException( "Error evaluating XPath expression against capabilities doc. ", xpe );
        }
    }
--*/
}