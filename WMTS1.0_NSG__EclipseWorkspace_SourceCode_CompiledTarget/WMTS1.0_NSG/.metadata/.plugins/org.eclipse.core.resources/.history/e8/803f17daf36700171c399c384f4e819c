package ets.wmts10.testsuite.getcapabilities;


import static org.testng.Assert.assertFalse;
import static org.testng.Assert.assertNotNull;
import static org.testng.Assert.assertTrue;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;

import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathException;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import javax.xml.xpath.XPathFactoryConfigurationException;

import org.testng.SkipException;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import de.latlon.ets.core.util.TestSuiteLogger;
import ets.wmts10.core.util.ServiceMetadataUtils;
import ets.wmts10.core.util.request.WmtsKvpRequestBuilder;
import ets.wmts10.testsuite.AbstractBaseGetFixture;

/**
 * @author <a href="mailto:goltz@lat-lon.de">Lyn Goltz</a>
 */
public abstract class AbstractBaseGetCapabilitiesFixture extends AbstractBaseGetFixture 
{
	private static final String KEYWORD_FILE = "nas.keywords";
	
    /**
     * Builds a {@link WmsKvpRequest} representing a GetCapabilities request for a complete service metadata document.
     */
    @BeforeClass
    public void buildGetCapabilitiesRequest()
    {
    	this.reqEntity = WmtsKvpRequestBuilder.buildGetCapabilitiesRequest(wmtsCapabilities, layerInfo);
    }

    @Test
    public void verifyGetCapabilitiesSupported() 
    {
    	Node getCapabilitiesEntry = null;
    	try
    	{
    		getCapabilitiesEntry = (Node)ServiceMetadataUtils.getNode(wmtsCapabilities, "//ows:OperationsMetadata/ows:Operation[@name = 'GetCapabilities']");
		} 
    	catch (XPathExpressionException e) 
    	{
		}
    	assertNotNull( getCapabilitiesEntry, "GetCapabilities is not supported by this WMTS" );
    }
    
    // ---
    
    // ---
    
    protected void verifyNASkeywords(String keywordLocationDescription, String keywordLocation) 
    		throws XPathException
    {
		Node keywordsElement = (Node)ServiceMetadataUtils.getNode(wmtsCapabilities, keywordLocation);
		if ( keywordsElement == null)
		{
			throw new SkipException("There is no <Keywords> Element to compare.");
		}
		if (( keywordsElement.getFirstChild() != null ) && ( keywordsElement.getChildNodes().getLength() > 0 ))
		{
			throw new SkipException("There are no <Keyword> Elements under the <Keywords> to compare.");
		}
		
		NodeList keywords = (NodeList)keywordsElement.getChildNodes();
		
		List<String> keywordsToCheck = new ArrayList<String>();
		for ( int keywordNodeIndex = 0; keywordNodeIndex < keywords.getLength(); keywordNodeIndex++ ) 
		{
			Node keywordNode = keywords.item( keywordNodeIndex );
			String keyword = keywordNode.getTextContent();
			if ( keyword != null )
				keywordsToCheck.add( keyword.toLowerCase().trim() );
		}
		
	    assertFalse(( keywordsToCheck == null ) || ( keywordsToCheck.isEmpty()) || ( keywordsToCheck.size() < 1 ), "Error creating or corrupt Keyword list");
     	
    	boolean anyFound = false;
       	try ( BufferedReader br = new BufferedReader( new InputStreamReader( this.getClass().getResourceAsStream( KEYWORD_FILE ), "UTF-8" ) ) ) 
       	{
       		String dfddKeyword;
       	    while ( ( dfddKeyword = br.readLine() ) != null ) 
       	    {
       	    	dfddKeyword = dfddKeyword.toLowerCase().trim();
       	    	if ( !dfddKeyword.isEmpty() )
       	    	{
       	    		if ( keywordsToCheck.contains( dfddKeyword) )
       	    		{
       	    			anyFound = true;
       	    			break;
       	    		}
       	    	}
       	    }        		
       	    br.close();
       	}
       	catch (IOException e)
       	{
       		TestSuiteLogger.log( Level.WARNING, "Keywords file " + KEYWORD_FILE + " could not be parsed.", e );
       		assertTrue(false, "Keywords file " + KEYWORD_FILE + " could not be parsed.");
       	}        
			
		assertTrue(anyFound,"No valid NAS keywords found in: " + keywordLocationDescription);		
    }
  
    // --- -------
  
}