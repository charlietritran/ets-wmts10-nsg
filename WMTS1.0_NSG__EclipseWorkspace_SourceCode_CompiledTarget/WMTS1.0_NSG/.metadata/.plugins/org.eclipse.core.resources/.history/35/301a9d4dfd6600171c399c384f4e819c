package nsg.wmts10.testsuite.getfeatureinfo;

import ets.wmts10.testsuite.getcapabilities.AbstractBaseGetCapabilitiesFixture;

import org.testng.ITestContext;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.sun.jersey.api.client.ClientResponse;

import de.latlon.ets.core.assertion.ETSAssert;
import de.latlon.ets.core.error.ErrorMessage;
import de.latlon.ets.core.error.ErrorMessageKey;

import static de.latlon.ets.core.assertion.ETSAssert.assertXPath;

import static org.testng.Assert.assertTrue;

import java.net.URI;

import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import javax.xml.xpath.XPathFactoryConfigurationException;

import ets.wmts10.core.domain.ProtocolBinding;
import ets.wmts10.core.domain.WMTS_Constants;
import ets.wmts10.core.util.ServiceMetadataUtils;


public class GetFeatureInfoKvp extends AbstractBaseGetCapabilitiesFixture 
{
/*---
	NSG Requirement 8: 
			An NSG WMTS server shall implement HTTP GET transfer of the GetFeatureInfo operation request using 
			KVP encoding.  
---*/
	
	private URI getFeatureInfoURI;
	
	private boolean _debug = false;

	
	@Test(description = "NSG Web Map Tile Service (WMTS) 1.0.0, Requirement 8")
	public void wmtsGetFeatureInfoExists() 
	{
		getFeatureInfoURI = ServiceMetadataUtils.getOperationEndpoint_KVP( this.wmtsCapabilities, WMTS_Constants.GET_FEATURE_INFO, ProtocolBinding.GET );
		assertTrue(getFeatureInfoURI != null, "GetFeatureInfo (GET) endpoint not found or KVP is not supported in ServiceMetadata capabilities document.");
	}
	   
	// ---
	
	@Test(description = "NSG Web Map Tile Service (WMTS) 1.0.0, Requirement 5", dependsOnMethods = "wmtsGetFeatureInfoExists")
	public void wmtsGetFeatureInfoRequestParameters( ITestContext testContext ) 
	{
		if ( getFeatureInfoURI == null )
		{
			getFeatureInfoURI = ServiceMetadataUtils.getOperationEndpoint_KVP( this.wmtsCapabilities, WMTS_Constants.GET_FEATURE_INFO, ProtocolBinding.GET );
		}
		String requestFormat = null;
		
		try
		{
			XPath xPath = createXPath();
			
			String layerName = this.reqEntity.getKvpValue(WMTS_Constants.LAYER_PARAM);
			if ( layerName == null)
			{
				NodeList layers = ServiceMetadataUtils.getNodeElements( xPath, wmtsCapabilities, "//wmts:Contents/wmts:Layer/ows:Identifier");
				if ( layers.getLength() > 0)
				{
					layerName = ((Node)layers.item(0)).getTextContent();
				}			
			}	        
			//NodeList imageFormats = ServiceMetadataUtils.getNodeElements( xPath, wmtsCapabilities, "//wmts:Contents/wmts:Layer[ows:Identifier = '" + layerName + "']/wmts:Format");
		
			/*--
			String pixelI = this.reqEntity.getKvpValue(WMTS_Constants.I_PARAM);
			String pixelJ = this.reqEntity.getKvpValue(WMTS_Constants.J_PARAM);
			--*/
			String infoFormat = this.reqEntity.getKvpValue(WMTS_Constants.INFO_FORMAT_PARAM);
			
			//SoftAssert sa = new SoftAssert();		

		//	for(int i=0; i<imageFormats.getLength(); i++)
			//{
			//	this.reqEntity.removeKvp( WMTS_Constants.FORMAT_PARAM );
			
			//	requestFormat = imageFormats.item(i).getTextContent();
			//	this.reqEntity.addKvp( WMTS_Constants.FORMAT_PARAM, requestFormat );
			
				ClientResponse rsp = wmtsClient.submitRequest( this.reqEntity, getFeatureInfoURI );
	        
				//storeResponseImage( rsp, "Requirement5", "simple", requestFormat );
/*--
				sa.assertTrue( rsp.hasEntity(), ErrorMessage.get( ErrorMessageKey.MISSING_XML_ENTITY ) );
				WmtsAssertion.assertStatusCode(  sa, rsp.getStatus(),  200 );
				WmtsAssertion.assertContentType( sa, rsp.getHeaders(), requestFormat );
				--*/
				assertTrue( rsp.hasEntity(), ErrorMessage.get( ErrorMessageKey.MISSING_XML_ENTITY ) );
				ETSAssert.assertStatusCode(  rsp.getStatus(),  200 );
				ETSAssert.assertContentType( rsp.getHeaders(), infoFormat );
			//}		
			//sa.assertAll();
		}
		catch (XPathExpressionException | XPathFactoryConfigurationException xpe)
		{
			System.out.println(xpe.getMessage());
			if ( this._debug )
			{
				xpe.printStackTrace();
			}
			assertTrue(false, "Invalid or corrupt XML or KVP structure:  " + xpe.getMessage());
		}
	}
	
	// ---

	// ---
	   

	
	// --- -------
/*--   */	   
	private XPath createXPath()
               throws XPathFactoryConfigurationException
	{
		XPathFactory factory = XPathFactory.newInstance( XPathConstants.DOM_OBJECT_MODEL );
		XPath xpath = factory.newXPath();
		xpath.setNamespaceContext( NS_BINDINGS );
		return xpath;
	}
/*	   --*/
}