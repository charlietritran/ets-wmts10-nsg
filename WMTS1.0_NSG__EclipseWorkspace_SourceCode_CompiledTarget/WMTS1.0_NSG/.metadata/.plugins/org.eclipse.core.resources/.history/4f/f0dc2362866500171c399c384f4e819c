package ets.wmts10.core.assertion;

import static de.latlon.ets.core.assertion.ETSAssert.assertQualifiedName;
import static de.latlon.ets.core.assertion.ETSAssert.assertXPath;
import static org.testng.Assert.assertTrue;

import java.util.Arrays;
import java.util.List;

import javax.ws.rs.core.MultivaluedMap;
import javax.xml.namespace.QName;

import org.testng.Assert;
import org.testng.asserts.SoftAssert;
import org.w3c.dom.Document;

import ets.wmts10.core.domain.WMTS_Constants;
import ets.wmts10.core.domain.WmtsNamespaces;

/**
 * Provides WMTS 1.0.0 specific test assertion methods
 * 
 * @author <a href="mailto:goltz@lat-lon.de">Lyn Goltz</a>
 */
public final class WmtsAssertion
{

    private WmtsAssertion() {
    }

    // ---
    
    /**
     * Asserts that the given DOM document has the expected root element 'WMTS_Capabilities' in namespace
     * {http://www.opengis.net/wmts}.
     * 
     * @param doc
     *            A Document node having {http://www.opengis.net/wmts} {@value WMTS_Constants#WMTS_CAPABILITIES} as the root
     *            element.
     */
    public static void assertSimpleWMTSCapabilities( Document doc ) 
    {
        assertQualifiedName( doc.getDocumentElement(), new QName( WmtsNamespaces.WMTS, WMTS_Constants.WMTS_CAPABILITIES ) );
    }

    // ---
    
    /**
     * Asserts that the actual content type matches the expected content type.
     *
     * @param response
     *            A Document node having {http://www.opengis.net/wmts} {@value WMTS_Constants#WMTS_CAPABILITIES} as the root
     *            element.
     */
    public static void assertVersion100( Document response )
    {
        assertXPath( "//wmts:Capabilities/@version = '1.0.0'", response, WmtsNamespaces.withStandardBindings() );
    }

    // ---
    
    /**
     * Asserts that the actual HTTP status code matches one of the expected status codes.
     * 
     * @param sa
     *			 determines if using a soft assert or hard assert            
     * @param actualCode
     *            The actual status code.
     * @param expectedCodes
     *            An int[] array containing the expected status codes.
     */
    public static void assertStatusCode( SoftAssert sa, int actualCode, int... expectedCodes )
    {
        Arrays.sort( expectedCodes ); // precondition for binary search
        boolean containsExpectedCodes = (Arrays.binarySearch( expectedCodes, actualCode ) >= 0);
        String msg = String.format( "Expected status code(s) %s but received %d.", Arrays.toString( expectedCodes ), actualCode ); 
        if ( sa == null )
        {
        	Assert.assertTrue( containsExpectedCodes, msg );
        }
        else
        {
        	sa.assertTrue( containsExpectedCodes, msg );
        }
    }

    // ---
    
    public static void assertStatusCode( int actualCode, int... expectedCodes )
    {
    	assertStatusCode(null, actualCode, expectedCodes );
    }
    	
    // ---
    
    /**
     * Asserts that the actual content type matches the expected content type.
     * 
     * @param sa
     *			 determines if using a soft assert or hard assert            
     * @param headers
     *            The header of the response.
     * @param expectedContentType
     *            The expected content type, never <code>null</code>.
     */
    public static void assertContentType( SoftAssert sa, MultivaluedMap<String, String> headers, String expectedContentType )
    {
        List<String> contentTypes = headers.get( "Content-Type" );
        boolean containsContentType = containsContentType( contentTypes, expectedContentType );
        String msg = String.format( "Expected content type %s, but received %s", expectedContentType,
                                    asString( contentTypes ) );
        if ( sa == null )
        {
        	Assert.assertTrue( containsContentType, msg );
        }
        else
        {
        	sa.assertTrue(containsContentType, msg);
        }
    }

    // ---
    
    public static void assertContentType(MultivaluedMap<String, String> headers, String expectedContentType )
    {
    	assertContentType(null, headers, expectedContentType);
    }
    
    // ---
    
    // ---
    
    // --- --------
    
    private static boolean containsContentType( List<String> contentTypes, String expectedContentType ) 
    {
        if ( contentTypes != null )
            for ( String contentType : contentTypes )
            {
                if ( contentType.contains( expectedContentType ) )
                    return true;
            }
        return false;
    }

    // ---
    
    private static String asString( List<String> values )
    {
        StringBuilder sb = new StringBuilder();
        for ( String value : values )
        {
            if ( sb.length() > 0 )
                sb.append( ", " );
            sb.append( value );
        }
        return sb.toString();
    }
}