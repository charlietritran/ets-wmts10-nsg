package nsg.wmts10.testsuite.gettile;

import ets.wmts10.testsuite.gettile.AbstractBaseGetTileFixture;

import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Random;

import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import javax.xml.xpath.XPathFactoryConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.testng.Assert;
import org.testng.ITestContext;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;
import org.testng.util.Strings;

import static de.latlon.ets.core.assertion.ETSAssert.assertUrl;
import static org.testng.Assert.assertTrue;

import com.sun.jersey.api.client.ClientResponse;

//import static de.latlon.ets.core.assertion.ETSAssert.assertXPath;
//import static de.latlon.ets.core.assertion.ETSAssert.assertStatusCode;
//import static de.latlon.ets.core.assertion.ETSAssert.assertContentType;
import de.latlon.ets.core.error.ErrorMessage;
import de.latlon.ets.core.error.ErrorMessageKey;
import de.latlon.ets.core.util.URIUtils;
import ets.wmts10.core.assertion.WmtsAssertion;
import ets.wmts10.core.domain.ProtocolBinding;
import ets.wmts10.core.domain.WMTS_Constants;
import ets.wmts10.core.util.ServiceMetadataUtils;


public class GetTileParametersRest extends AbstractBaseGetTileFixture
{
/*---
	NSG Requirement 7: 
		An NSG WMTS server shall provide standard endpoints from which a representation of each Tile resource can b
		e obtained. 	
---*/
	
	private URI getTileURI = null;
	
	@Test(description = "NSG Web Map Tile Service (WMTS) 1.0.0, Requirement 7")//, dependsOnMethods = "wmtsGetTileOperationExists")
	public void wmtsGetTileRESTCapable() 
			throws XPathExpressionException, XPathFactoryConfigurationException 
	{
		getTileURI = ServiceMetadataUtils.getOperationEndpoint_REST(wmtsCapabilities, WMTS_Constants.GET_TILE, ProtocolBinding.GET);
		URI sampleURI = getTileURI;
		
		if ( getTileURI == null )
		{
			XPath xPath = createXPath();
			NodeList resourceURLs = (NodeList)xPath.evaluate("//wmts:Contents/wmts:Layer/wmts:ResourceURL", wmtsCapabilities, XPathConstants.NODESET);

			for (int i=0; ((sampleURI == null ) && (i < resourceURLs.getLength() )); i++)
			{
				String testStr = (String)xPath.evaluate("@template", resourceURLs.item(i), XPathConstants.STRING);
				String testSet = (String)xPath.evaluate("//wmts:Contents/wmts:TileMatrixSet/ows:Identifier", wmtsCapabilities, XPathConstants.STRING);
				if ( testStr != null )
				{
					try
					{
						testStr = testStr.replaceAll("\\{Style\\}", "default");
						testStr = testStr.replaceAll("\\{TileMatrixSet\\}", testSet);
						testStr = testStr.replaceAll("\\{TileMatrix\\}","0");
						testStr = testStr.replaceAll("\\{TileRow\\}","0");
						testStr = testStr.replaceAll("\\{TileCol\\}","0");
						sampleURI = new URI( testStr );
					}
					catch (URISyntaxException ue)
					{
						sampleURI = null;
					}
				}
			}
		}
		assertTrue(sampleURI != null,  "GetTile (GET) endpoint not found or REST is not supported in ServiceMetadata capabilities document.");
	}	
	   
	// ---
	   
	@Test(description = "NSG Web Map Tile Service (WMTS) 1.0.0, Requirement 7", dependsOnMethods = "wmtsGetTileRESTCapable")
	public void wmsGetTileRequestParametersSupported( ITestContext testContext ) 
			throws XPathFactoryConfigurationException, XPathExpressionException
	                //    throws SOAPException
	{
		String requestFormat = null;
		
		String layerName = this.reqEntity.getKvpValue(WMTS_Constants.LAYER_PARAM);
		if ( layerName == null)
		{
			NodeList layers = ServiceMetadataUtils.getNodeElements( wmtsCapabilities, "//wmts:Contents/wmts:Layer/ows:Identifier");
			if ( layers.getLength() > 0)
			{
				layerName = ((Node)layers.item(0)).getTextContent();
			}			
		}
	        
		// --- get the prepopulated KVP parameters, for the SOAP parameters
		
		String style = this.reqEntity.getKvpValue(WMTS_Constants.STYLE_PARAM);
		String tileMatrixSet = this.reqEntity.getKvpValue(WMTS_Constants.TILE_MATRIX_SET_PARAM);
		String tileMatrix = this.reqEntity.getKvpValue(WMTS_Constants.TILE_MATRIX_PARAM);
		String tileRow = this.reqEntity.getKvpValue(WMTS_Constants.TILE_ROW_PARAM);
		String tileCol = this.reqEntity.getKvpValue(WMTS_Constants.TILE_COL_PARAM);
		
		if ( getTileURI == null )
		{
			NodeList resourceURLs = ServiceMetadataUtils.getNodeElements( wmtsCapabilities, "//wmts:Contents/wmts:Layer[ows:Identifier = '" + layerName + "']/wmts:ResourceURL");

			Assert.assertTrue(((resourceURLs != null) &&( resourceURLs.getLength()>0)), "WMTS apparently does not support REST or contains no REST endpoints for layer: " + layerName);
		
			Random random = new Random();
			int randomIndx = random.nextInt(resourceURLs.getLength());
			
			String testStr = (String)createXPath().evaluate("@template", resourceURLs.item(randomIndx), XPathConstants.STRING);
			if ( testStr != null )
			{
				try
				{
					testStr = testStr.replaceAll("\\{Style\\}", style);
					testStr = testStr.replaceAll("\\{TileMatrixSet\\}", tileMatrixSet);
					testStr = testStr.replaceAll("\\{TileMatrix\\}", tileMatrix);
					testStr = testStr.replaceAll("\\{TileRow\\}", tileRow);
					testStr = testStr.replaceAll("\\{TileCol\\}", tileCol);
					getTileURI = new URI( testStr );
				}
				catch (URISyntaxException ue)
				{
					getTileURI = null;
				}
			}			
		}
		
		assertUrl(getTileURI.toString());
		//assertUriIsResolvable(restURIstr);
		
		 try 
		 {
			//Document responseDoc = URIUtils.resolveURIAsDocument(getTileURI);
			 File responseFile = URIUtils.resolveURIAsFile(getTileURI);
			 assertTrue (responseFile != null, "Not quite");
			/*--
            assertTrue(WMTS_Constants.GET_TILE.equals( responseDoc.getDocumentElement().getLocalName() ),
            		"Invalid REST request for WMTS ServeiceMetadata capabilities document: " + responseDoc.getDocumentElement().getNodeName() );
            --*/
			//storeResponseImage( responseDoc, "Requirement7", "simple", requestFormat );

		 }
		 catch (Exception e)
		 {
			System.out.println(e.getMessage());
			e.printStackTrace();
			assertTrue(false, "Error found when retrieving REST Get Tile request: " + e.getMessage());
		 }
		
				
		
	}
	   // ---

	   // ---
	   

	
	
	   // --- -------
	   
	   private XPath createXPath()
               throws XPathFactoryConfigurationException
	   {
		   XPathFactory factory = XPathFactory.newInstance( XPathConstants.DOM_OBJECT_MODEL );
		   XPath xpath = factory.newXPath();
		   xpath.setNamespaceContext( NS_BINDINGS );
		   return xpath;
	   }

}