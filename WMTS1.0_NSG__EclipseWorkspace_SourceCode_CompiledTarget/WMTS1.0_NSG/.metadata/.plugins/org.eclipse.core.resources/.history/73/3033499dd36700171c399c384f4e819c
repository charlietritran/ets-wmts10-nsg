package nsg.wmts10.testsuite.getcapabilities;

import java.net.URI;

import org.testng.annotations.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

import com.sun.jersey.api.client.ClientResponse;

import de.latlon.ets.core.error.ErrorMessage;
import de.latlon.ets.core.error.ErrorMessageKey;

import static de.latlon.ets.core.assertion.ETSAssert.assertXPath;
import static de.latlon.ets.core.assertion.ETSAssert.assertUrl;
import static de.latlon.ets.core.assertion.ETSAssert.assertUriIsResolvable;
import static org.testng.Assert.assertFalse;
import static org.testng.Assert.assertTrue;

import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPMessage;

import javax.xml.transform.*;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPathExpressionException;

/*--
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import javax.xml.xpath.XPathFactoryConfigurationException;
--*/
import ets.wmts10.core.domain.ProtocolBinding;
import ets.wmts10.core.domain.WMTS_Constants;
import ets.wmts10.core.domain.WmtsNamespaces;
import ets.wmts10.core.util.ServiceMetadataUtils;
import ets.wmts10.core.util.WMTS_SOAPcontainer;
import ets.wmts10.testsuite.getcapabilities.AbstractBaseGetCapabilitiesFixture;


public class GetCapabilitiesSoapVersionTest extends AbstractBaseGetCapabilitiesFixture 
{
/*---
	NSG Requirement 16: 
		An NSG WMTS server shall support negotiation of the standard version used for client-server interactions 
		with SOAP encoding. 	
---*/
	private URI URI;
	
	
	private URI getCapabilitiesURI;
	
	
	@Test(description = "NSG Web Map Tile Service (WMTS) 1.0.0, Requirement 16", dependsOnMethods = "verifyGetCapabilitiesSupported")
	public void wmtsGetCapabilitiesURLExists() 
	{
		getCapabilitiesURI = ServiceMetadataUtils.getOperationEndpoint_SOAP( this.wmtsCapabilities, WMTS_Constants.GET_CAPABILITIES, ProtocolBinding.POST );
		assertTrue(getCapabilitiesURI != null, "GetCapabilities (GET) endpoint not found or SOAP is not supported in ServiceMetadata capabilities document.");
	}
	   
	// ---
	
	@Test(description = "NSG Web Map Tile Service (WMTS) 1.0.0, Requirement 16", dependsOnMethods="wmtsGetCapabilitiesURLExists")
	public void wmtsCapabilitiesVersionTest() 
			throws XPathExpressionException 
	{		   
		String versionManipulation = WMTS_Constants.VERSION;

		// --- try a version number higher
		versionManipulation = (1 + Integer.parseInt(versionManipulation.substring(0, 1))) + versionManipulation.substring(1); 
		assertFalse(verifyVersionResponse(versionManipulation), "WMTS did not handle an invalid version ('" + versionManipulation + "') correctly");
		
		// ---

		// --- try a version number lower
		//		versionManipulation = WMTS_Constants.VERSION;
		versionManipulation = "0.0.1";
		assertFalse(verifyVersionResponse(versionManipulation), "WMTS did not handle an invalid version ('" + versionManipulation + "') correctly");

		// ---
		// --- try the correct version number 
		assertTrue(verifyVersionResponse(WMTS_Constants.VERSION), "This WMTS does not accept the current version ('" + WMTS_Constants.VERSION + "')");
	}
	
	// ---
	   
	private boolean verifyVersionResponse(String version) 
			throws XPathExpressionException
	{
		boolean result = false;
			
		if ( getCapabilitiesURI == null )
		{
			getCapabilitiesURI = ServiceMetadataUtils.getOperationEndpoint_KVP( this.wmtsCapabilities, WMTS_Constants.GET_CAPABILITIES, ProtocolBinding.GET );
		}

		String soapURIstr = getCapabilitiesURI.toString(); 
		assertUrl(soapURIstr);
		
		WMTS_SOAPcontainer soap = new WMTS_SOAPcontainer(WMTS_Constants.GET_CAPABILITIES, soapURIstr);

		soap.AddParameterWithChild(WmtsNamespaces.serviceOWS, WMTS_Constants.ACCEPT_VERSIONS_PARAM, WMTS_Constants.VERSION_PARAM, version);
		soap.AddParameterWithChild(WmtsNamespaces.serviceOWS, WMTS_Constants.ACCEPT_FORMAT_PARAM,   WMTS_Constants.OUTPUT_PARAM,  WMTS_Constants.SOAP_XML);
	
		SOAPMessage soapResponse = soap.getSOAPresponse(false);
		assertTrue(soapResponse != null, "SOAP reposnse came back null");
		
		Document soapDocument = soap.getResponseDocument();
		/*-- */
			this.parseNodes(soapDocument,0);
		/* --*/	
		String soapResults = (String)ServiceMetadataUtils.getNodeText(soapDocument, "//wmts:Capabilities/@version");
		
		//assertXPath( "//wmts:Capabilities/@version = '1.0.0'", soapDocument, NS_BINDINGS );
		
		
		
		
		
		
	
		
		return result;
	}	 

         
	// --- --------

    // ---
    
/*---   */
    private void parseNodes(Node n, int level)
    {       	
    	if ( n != null)
    	{
    		String nam = n.getNodeName();
    		String val = n.getNodeValue();
    		String lnm = n.getLocalName();
    		
    		if ( !nam.contains(":") && !nam.startsWith("#"))
    		{
    			String namespace = n.getNamespaceURI();
    			if ( namespace.contains("soap"))
    				nam = "soup:" + nam;
    			else if ( namespace.contains("ows"))
    				nam = "ows:" + nam;
    			else if ( namespace.contains("wmts"))
    				nam = "wmts:" + nam;
    		}
    		
    		for (int i=0; i<level; i++)
    			System.out.print("\t");
    		System.out.println("Node: " + nam + " = " + val);
    		parseNodes(n.getFirstChild(), level+1);
    		
    		parseNodes(n.getNextSibling(), level);
    	}
    }
/*  ---*/
		
    // --- -------
/*---    
	   private XPath createXPath()
            throws XPathFactoryConfigurationException
	   {
		   XPathFactory factory = XPathFactory.newInstance( XPathConstants.DOM_OBJECT_MODEL );
		   XPath xpath = factory.newXPath();
		   xpath.setNamespaceContext( NS_BINDINGS );
		   return xpath;
	   }
  ---*/	
	
	
}