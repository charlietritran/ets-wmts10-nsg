!SESSION 2017-06-26 09:14:37.021 -----------------------------------------------
eclipse.buildId=4.6.3.M20170301-0400
java.version=1.8.0_121
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\TestNG\Workspaces\WMTS1.0_NSG\.metadata\.bak_2.log
Created Time: 2017-07-12 20:02:09.703

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:09.703
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:09.703
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:09.750
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:09.750
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:09.750
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:09.797
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:09.797
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:09.797
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:09.828
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:09.828
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:09.828
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:09.875
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:09.875
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:09.875
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:09.906
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:09.906
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:09.906
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:09.953
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:09.953
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:09.953
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:09.984
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:09.984
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:09.984
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:10.031
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:10.031
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:10.031
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:10.062
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:10.062
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:10.062
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:10.109
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:10.109
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:10.109
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:10.187
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:10.187
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:10.187
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:10.281
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:10.281
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:10.281
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:10.375
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:10.375
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:10.375
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:10.500
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-07-12 20:02:10.500
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-07-12 20:02:10.500
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-07-12 20:02:10.594
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
/*      */ package com.sun.xml.internal.messaging.saaj.soap;
/*      */ 
/*      */ import com.sun.xml.internal.messaging.saaj.SOAPExceptionImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.Header;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ContentType;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimePullMultipart;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParameterList;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.SharedInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.packaging.mime.util.ASCIIUtility;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.AttachmentPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPPartImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.SOAPVersionMismatchException;
/*      */ import com.sun.xml.internal.messaging.saaj.soap.impl.EnvelopeImpl;
/*      */ import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FastInfosetReflection;
/*      */ import com.sun.xml.internal.messaging.saaj.util.FinalArrayList;
/*      */ import com.sun.xml.internal.messaging.saaj.util.SAAJUtil;
/*      */ import com.sun.xml.internal.org.jvnet.mimepull.MIMEPart;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Collections;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.logging.Level;
/*      */ import java.util.logging.Logger;
/*      */ import javax.activation.DataHandler;
/*      */ import javax.activation.DataSource;
/*      */ import javax.xml.soap.AttachmentPart;
/*      */ import javax.xml.soap.MimeHeaders;
/*      */ import javax.xml.soap.Node;
/*      */ import javax.xml.soap.SOAPBody;
/*      */ import javax.xml.soap.SOAPConstants;
/*      */ import javax.xml.soap.SOAPElement;
/*      */ import javax.xml.soap.SOAPException;
/*      */ import javax.xml.soap.SOAPHeader;
/*      */ import javax.xml.soap.SOAPMessage;
/*      */ import javax.xml.soap.SOAPPart;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.stream.StreamSource;
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class MessageImpl extends SOAPMessage implements SOAPConstants {
/*      */    public static final String CONTENT_ID = "Content-ID";
/*      */    public static final String CONTENT_LOCATION = "Content-Location";
/*      */    protected static final Logger log = Logger.getLogger("com.sun.xml.internal.messaging.saaj.soap", "com.sun.xml.internal.messaging.saaj.soap.LocalStrings");
/*      */    protected static final int PLAIN_XML_FLAG = 1;
/*      */    protected static final int MIME_MULTIPART_FLAG = 2;
/*      */    protected static final int SOAP1_1_FLAG = 4;
/*      */    protected static final int SOAP1_2_FLAG = 8;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_1_FLAG = 6;
/*      */    protected static final int MIME_MULTIPART_XOP_SOAP1_2_FLAG = 10;
/*      */    protected static final int XOP_FLAG = 13;
/*      */    protected static final int FI_ENCODED_FLAG = 16;
/*      */    protected MimeHeaders headers;
/*      */    protected ContentType contentType;
/*      */    protected SOAPPartImpl soapPartImpl;
/*      */    protected FinalArrayList attachments;
/*      */    protected boolean saved;
/*      */    protected byte[] messageBytes;
/*      */    protected int messageByteCount;
/*      */    protected HashMap properties;
/*      */    protected MimeMultipart multiPart;
/*      */    protected boolean attachmentsInitialized;
/*      */    protected boolean isFastInfoset;
/*      */    protected boolean acceptFastInfoset;
/*      */    protected MimeMultipart mmp;
/*      */    private boolean optimizeAttachmentProcessing;
/*      */    private InputStream inputStreamAfterSaveChanges;
/*      */    private static boolean switchOffBM = false;
/*      */    private static boolean switchOffLazyAttachment = false;
/*      */    private static boolean useMimePull = false;
/*      */    private boolean lazyAttachments;
/*      */    private static final Iterator nullIter;
/*      */ 
/*      */    protected MessageImpl(MimeHeaders headers, ContentType contentType, int stat, InputStream in) throws SOAPExceptionImpl {
/*   85 */       this.saved = false;
/*      */ 
/*      */ 
/*   88 */       this.properties = new HashMap();
/*      */ 
/*      */ 
/*   91 */       this.multiPart = null;
/*   92 */       this.attachmentsInitialized = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   98 */       this.isFastInfoset = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  104 */       this.acceptFastInfoset = false;
/*      */ 
/*  106 */       this.mmp = null;
/*      */ 
/*      */ 
/*  109 */       this.optimizeAttachmentProcessing = true;
/*      */ 
/*  111 */       this.inputStreamAfterSaveChanges = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static {
/*  119 */       String s = SAAJUtil.getSystemProperty("saaj.mime.optimization");
/*  120 */       if(s != null && s.equals("false")) {
/*  121 */          switchOffBM = true;
/*      */       }
/*  123 */       s = SAAJUtil.getSystemProperty("saaj.lazy.mime.optimization");
/*  124 */       if(s != null && s.equals("false")) {
/*  125 */          switchOffLazyAttachment = true;
/*      */       }
/*  127 */       useMimePull = SAAJUtil.getSystemBoolean("saaj.use.mimepull");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  132 */       this.lazyAttachments = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_1Type(String primary, String sub) {
/*  153 */       return primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml") || primary.equalsIgnoreCase("text") && sub.equalsIgnoreCase("xml-soap") || primary.equals("application") && sub.equals("fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_1Type(String type) {
/*  164 */       return type.startsWith("text/xml") || type.startsWith("application/fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isSoap1_2Type(String primary, String sub) {
/*  175 */       return primary.equals("application") && (sub.equals("soap+xml") || sub.equals("soap+fastinfoset"));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static boolean isEqualToSoap1_2Type(String type) {
/*  185 */       return type.startsWith("application/soap+xml") || type.startsWith("application/soap+fastinfoset");
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected MessageImpl() {
/*  194 */       this(false, false);
/*  195 */       this.attachmentsInitialized = true;
/*  196 */    }
/*      */    protected MessageImpl(boolean isFastInfoset, boolean acceptFastInfoset) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  203 */       this.isFastInfoset = isFastInfoset;
/*  204 */       this.acceptFastInfoset = acceptFastInfoset;
/*      */ 
/*  206 */       this.headers = new MimeHeaders();
/*  207 */       this.headers.setHeader("Accept", this.getExpectedAcceptHeader());
/*  208 */       this.contentType = new ContentType();
/*  209 */    }
/*      */    protected MessageImpl(SOAPMessage msg) {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;      this.isFastInfoset = false;      this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  215 */       if(!(msg instanceof MessageImpl)) {
/*      */          ;      }
/*      */ 
/*  218 */       MessageImpl src = (MessageImpl)msg;
/*  219 */       this.headers = src.headers;
/*  220 */       this.soapPartImpl = src.soapPartImpl;
/*  221 */       this.attachments = src.attachments;
/*  222 */       this.saved = src.saved;
/*  223 */       this.messageBytes = src.messageBytes;
/*  224 */       this.messageByteCount = src.messageByteCount;
/*  225 */       this.properties = src.properties;
/*  226 */       this.contentType = src.contentType;
/*  227 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_1Content(int stat) {
/*  234 */       return (stat & 4) != 0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    protected static boolean isSoap1_2Content(int stat) {
/*  242 */       return (stat & 8) != 0;
/*      */    }
/*      */ 
/*      */    private static boolean isMimeMultipartXOPSoap1_2Package(ContentType contentType) {
/*  246 */       String type = contentType.getParameter("type");
/*  247 */       if(type == null) {
/*  248 */          return false;
/*      */       } else {
/*  250 */          type = type.toLowerCase();
/*  251 */          if(!type.startsWith("application/xop+xml")) {
/*  252 */             return false;
/*      */          } else {
/*  254 */             String startinfo = contentType.getParameter("start-info");
/*  255 */             if(startinfo == null) {
/*  256 */                return false;
/*      */             } else {
/*  258 */                startinfo = startinfo.toLowerCase();
/*  259 */                return isEqualToSoap1_2Type(startinfo);
/*      */             }
/*      */          }
/*      */       }
/*      */    }
/*      */    private static boolean isMimeMultipartXOPSoap1_1Package(ContentType contentType) {
/*  265 */       String type = contentType.getParameter("type");
/*  266 */       if(type == null) {
/*  267 */          return false;
/*      */       } else {
/*  269 */          type = type.toLowerCase();
/*  270 */          if(!type.startsWith("application/xop+xml")) {
/*  271 */             return false;
/*      */          } else {
/*  273 */             String startinfo = contentType.getParameter("start-info");
/*  274 */             if(startinfo == null) {
/*  275 */                return false;            } else {
/*  276 */                startinfo = startinfo.toLowerCase();
/*  277 */                return isEqualToSoap1_1Type(startinfo);
/*      */             }
/*      */          }
/*      */       }   private static boolean isSOAPBodyXOPPackage(ContentType contentType) {   }
/*  281 */       String primary = contentType.getPrimaryType();
/*  282 */       String sub = contentType.getSubType();
/*      */ 
/*  284 */       if(primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("xop+xml")) {
/*      */ 
/*  286 */          String type = getTypeParameter(contentType);
/*  287 */          return isEqualToSoap1_2Type(type) || isEqualToSoap1_1Type(type);
/*      */ 
/*      */       } else {
/*  290 */          return false;
/*      */       }
/*      */    }
/*      */    protected MessageImpl(MimeHeaders headers, InputStream in) throws SOAPExceptionImpl {      this.saved = false;      this.properties = new HashMap();      this.multiPart = null;      this.attachmentsInitialized = false;
/*      */       this.isFastInfoset = false;
/*      */       this.acceptFastInfoset = false;
/*      */       this.mmp = null;
/*      */       this.optimizeAttachmentProcessing = true;
/*      */       this.inputStreamAfterSaveChanges = null;
/*      */       this.lazyAttachments = false;
/*  300 */       this.contentType = parseContentType(headers);
/*  301 */       this.init(headers, identifyContentType(this.contentType), this.contentType, in);
/*  302 */    }
/*      */ 
/*      */ 
/*      */    private static ContentType parseContentType(MimeHeaders headers) throws SOAPExceptionImpl {
/*  306 */       if(headers != null) {
/*  307 */          String ct = getContentType(headers);
/*      */             }         }      } else {
/*  309 */          log.severe("SAAJ0550.soap.null.headers");
/*  310 */          throw new SOAPExceptionImpl("Cannot create message: Headers can\'t be null");
/*      */       }
/*      */    }
/*      */ 
/*  314 */          if(ct == null) {
/*  315 */             log.severe("SAAJ0532.soap.no.Content-Type");
/*  316 */             throw new SOAPExceptionImpl("Absent Content-Type");
/*      */          } else {
/*      */             try {
/*  319 */                return new ContentType(ct);
/*  320 */             } catch (Throwable arg2) {
/*  321 */                log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  322 */                throw new SOAPExceptionImpl("Unable to internalize message", arg2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  340 */       this.init(headers, stat, contentType, in);
/*      */ 
/*  342 */    }
/*      */ 
/*      */    private void init(MimeHeaders headers, int stat, final ContentType contentType, final InputStream in) throws SOAPExceptionImpl {
/*  345 */       this.headers = headers;
/*      */ 
/*      */ 
/*      */ 
/*      */       try {
/*  350 */          if((stat & 16) > 0) {
/*  351 */             this.isFastInfoset = this.acceptFastInfoset = true;
/*      */          }
/*      */ 
/*      */          StringTokenizer soapMessagePart;
/*  355 */          if(!this.isFastInfoset) {
/*  356 */             String[] ex = headers.getHeader("Accept");
/*  357 */             if(ex != null) {               label152:
/*  358 */                for(int startParam = 0; startParam < ex.length; ++startParam) {
/*  359 */                   soapMessagePart = new StringTokenizer(ex[startParam], ",");                  String soapPartInputStream;                  do {
/*  360 */                      if(!soapMessagePart.hasMoreTokens()) {                        continue label152;                     }
/*  361 */                      soapPartInputStream = soapMessagePart.nextToken().trim();
/*  362 */                   } while(!soapPartInputStream.equalsIgnoreCase("application/fastinfoset") && !soapPartInputStream.equalsIgnoreCase("application/soap+fastinfoset"));
/*      */ 
/*  364 */                   this.acceptFastInfoset = true;
/*      */ 
/*      */ 
/*      */ 
/*      */                }
/*      */             }
/*      */          }
/*      */ 
/*  372 */          if(!this.isCorrectSoapVersion(stat)) {
/*  373 */             log.log(Level.SEVERE, "SAAJ0533.soap.incorrect.Content-Type", new String[]{contentType.toString(), this.getExpectedContentType()});
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  379 */             throw new SOAPVersionMismatchException("Cannot create message: incorrect content-type for SOAP version. Got: " + contentType + " Expected: " + this.getExpectedContentType());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/*  386 */          if((stat & 1) != 0) {
/*  387 */             if(this.isFastInfoset) {
/*  388 */                this.getSOAPPart().setContent(FastInfosetReflection.FastInfosetSource_new(in));
/*      */ 
/*      */             } else {
/*  391 */                this.initCharsetProperty(contentType);
/*  392 */                this.getSOAPPart().setContent(new StreamSource(in));
/*      */             }
/*      */          } else {
/*  395 */             if((stat & 2) == 0) {               }            }            DataSource arg19 = new DataSource() {
/*  396 */             };
/*      */                public InputStream getInputStream() {
/*  398 */                   return in;
/*      */                }
/*      */ 
/*      */                public OutputStream getOutputStream() {
/*  402 */                   return null;
/*      */                }
/*      */ 
/*      */                public String getContentType() {
/*  406 */                   return contentType.toString();
/*      */                }
/*      */ 
/*      */                public String getName() {
/*  410 */                   return "";
/*      */ 
/*      */ 
/*      */ 
/*  414 */             this.multiPart = null;
/*  415 */             if(useMimePull) {
/*  416 */                this.multiPart = new MimePullMultipart(arg19, contentType);
/*  417 */             } else if(switchOffBM) {
/*  418 */                this.multiPart = new MimeMultipart(arg19, contentType);
/*      */             } else {
/*  420 */                this.multiPart = new BMMimeMultipart(arg19, contentType);
/*      */             }
/*      */ 
/*  423 */             String arg20 = contentType.getParameter("start");
/*  424 */             soapMessagePart = null;
/*  425 */             InputStream arg22 = null;
/*  426 */             String contentID = null;
/*  427 */             String contentIDNoAngle = null;            MimeBodyPart arg21;
/*  428 */             if(!switchOffBM && !switchOffLazyAttachment) {                     }                  }               }            } else {               int soapPartCType;
/*  429 */                if(arg20 == null) {
/*  430 */                   arg21 = this.multiPart.getBodyPart(0);
/*  431 */                   for(soapPartCType = 1; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  432 */                      this.initializeAttachment(this.multiPart, soapPartCType);
/*      */                   }
/*      */                } else {
/*  435 */                   arg21 = this.multiPart.getBodyPart(arg20);
/*  436 */                   for(soapPartCType = 0; soapPartCType < this.multiPart.getCount(); ++soapPartCType) {
/*  437 */                      contentID = this.multiPart.getBodyPart(soapPartCType).getContentID();
/*      */ 
/*      */ 
/*  440 */                      contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */ 
/*  442 */                      if(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  443 */                         this.initializeAttachment(this.multiPart, soapPartCType);
/*      */ 
/*      */ 
/*      */ 
/*  447 */                if(useMimePull) {
/*  448 */                   MimePullMultipart arg25 = (MimePullMultipart)this.multiPart;
/*  449 */                   MIMEPart arg23 = arg25.readAndReturnSOAPPart();
/*  450 */                   arg21 = new MimeBodyPart(arg23);
/*  451 */                   arg22 = arg23.readOnce();
/*      */                } else {
/*  453 */                   BMMimeMultipart arg24 = (BMMimeMultipart)this.multiPart;
/*      */ 
/*  455 */                   InputStream baseType = arg24.initStream();
/*      */ 
/*  457 */                   SharedInputStream soapPart = null;
/*  458 */                   if(baseType instanceof SharedInputStream) {
/*  459 */                      soapPart = (SharedInputStream)baseType;
/*      */                   }
/*      */ 
/*  462 */                   String boundary = "--" + contentType.getParameter("boundary");
/*      */ 
/*  464 */                   byte[] bndbytes = ASCIIUtility.getBytes(boundary);
/*  465 */                   if(arg20 == null) {
/*      */ 
/*  467 */                      arg21 = arg24.getNextPart(baseType, bndbytes, soapPart);
/*  468 */                      arg24.removeBodyPart(arg21);
/*      */                   } else {
/*  470 */                      MimeBodyPart bp = null;
/*      */                      try {
/*  472 */                         while(!arg20.equals(contentID) && !arg20.equals(contentIDNoAngle)) {
/*  473 */                            bp = arg24.getNextPart(baseType, bndbytes, soapPart);
/*      */ 
/*  475 */                            contentID = bp.getContentID();
/*      */ 
/*      */ 
/*  478 */                            contentIDNoAngle = contentID != null?contentID.replaceFirst("^<", "").replaceFirst(">$", ""):null;
/*      */                         }
/*      */ 
/*  481 */                         arg21 = bp;
/*  482 */                         arg24.removeBodyPart(bp);
/*  483 */                      } catch (Exception arg17) {
/*  484 */                         throw new SOAPExceptionImpl(arg17);
/*      */                      }
/*      */                   }
/*      */                }
/*      */             }
/*      */ 
/*  490 */             if(arg22 == null && arg21 != null) {
/*  491 */                arg22 = arg21.getInputStream();
/*      */ 
/*      */             }
/*      */ 
/*  495 */             ContentType arg27 = new ContentType(arg21.getContentType());
/*  496 */             this.initCharsetProperty(arg27);
/*  497 */             String arg26 = arg27.getBaseType().toLowerCase();
/*  498 */             if(!isEqualToSoap1_1Type(arg26) && !isEqualToSoap1_2Type(arg26) && !isSOAPBodyXOPPackage(arg27)) {
/*      */ 
/*      */ 
/*  501 */                log.log(Level.SEVERE, "SAAJ0549.soap.part.invalid.Content-Type", new Object[]{arg26});
/*      */ 
/*      */ 
/*  504 */                throw new SOAPExceptionImpl("Bad Content-Type for SOAP Part : " + arg26);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/*  509 */             SOAPPart arg28 = this.getSOAPPart();
/*  510 */             this.setMimeHeaders(arg28, arg21);
/*  511 */             arg28.setContent((Source)(this.isFastInfoset?FastInfosetReflection.FastInfosetSource_new(arg22):new StreamSource(arg22)));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  516 */                log.severe("SAAJ0534.soap.unknown.Content-Type");
/*  517 */                throw new SOAPExceptionImpl("Unrecognized Content-Type");
/*      */          }
/*  519 */       } catch (Throwable arg18) {
/*  520 */          log.severe("SAAJ0535.soap.cannot.internalize.message");
/*  521 */          throw new SOAPExceptionImpl("Unable to internalize message", arg18);
/*      */       }
/*  523 */       this.needsSave();
/*  524 */    }
/*      */ 
/*      */    public boolean isFastInfoset() {
/*  527 */       return this.isFastInfoset;
/*      */    }
/*      */ 
/*      */    public boolean acceptFastInfoset() {
/*  531 */       return this.acceptFastInfoset;
/*      */    }
/*      */ 
/*      */    public void setIsFastInfoset(boolean value) {
/*  535 */       if(value != this.isFastInfoset) {
/*  536 */          this.isFastInfoset = value;
/*  537 */          if(this.isFastInfoset) {
/*  538 */             this.acceptFastInfoset = true;
/*      */          }
/*  540 */          this.saved = false;
/*      */       }
/*  542 */    }
/*      */ 
/*      */    public Object getProperty(String property) {
/*  545 */       return (String)this.properties.get(property);
/*      */    }
/*      */ 
/*      */    public void setProperty(String property, Object value) {
/*  549 */       this.verify(property, value);
/*  550 */       this.properties.put(property, value);
/*  551 */    }
/*      */ 
/*      */    private void verify(String property, Object value) {
/*  554 */       if(property.equalsIgnoreCase("javax.xml.soap.write-xml-declaration")) {
/*  555 */          if(!"true".equals(value) && !"false".equals(value)) {
/*  556 */             throw new RuntimeException(property + " must have value false or true");
/*      */ 
/*      */          } else {
/*      */             try {
/*  560 */                EnvelopeImpl e = (EnvelopeImpl)this.getSOAPPart().getEnvelope();
/*  561 */                if("true".equalsIgnoreCase((String)value)) {
/*  562 */                   e.setOmitXmlDecl("no");
/*  563 */                } else if("false".equalsIgnoreCase((String)value)) {
/*  564 */                   e.setOmitXmlDecl("yes");
/*      */                }
/*  566 */             } catch (Exception arg3) {
/*  567 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg3.getMessage(), "javax.xml.soap.write-xml-declaration"});
/*      */ 
/*  569 */                throw new RuntimeException(arg3);
/*      */             }         }      }            }
/*  571 */    }
/*      */          }
/*      */       } else {
/*  574 */          if(property.equalsIgnoreCase("javax.xml.soap.character-set-encoding")) {
/*      */             try {
/*  576 */                ((EnvelopeImpl)this.getSOAPPart().getEnvelope()).setCharsetEncoding((String)value);
/*  577 */             } catch (Exception arg4) {
/*  578 */                log.log(Level.SEVERE, "SAAJ0591.soap.exception.in.set.property", new Object[]{arg4.getMessage(), "javax.xml.soap.character-set-encoding"});
/*      */ 
/*  580 */                throw new RuntimeException(arg4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    static int identifyContentType(ContentType ct) throws SOAPExceptionImpl {
/*  608 */       String primary = ct.getPrimaryType().toLowerCase();
/*  609 */       String sub = ct.getSubType().toLowerCase();
/*      */ 
/*  611 */       if(primary.equals("multipart")) {
/*  612 */          if(sub.equals("related")) {
/*  613 */             String type = getTypeParameter(ct);
/*  614 */             if(isEqualToSoap1_1Type(type)) {
/*  615 */                return (type.equals("application/fastinfoset")?16:0) | 2 | 4;
/*      */ 
/*      */ 
/*  618 */             } else if(isEqualToSoap1_2Type(type)) {
/*  619 */                return (type.equals("application/soap+fastinfoset")?16:0) | 2 | 8;
/*      */ 
/*      */ 
/*      */ 
/*  623 */             } else if(isMimeMultipartXOPSoap1_1Package(ct)) {
/*  624 */                return 6;
/*  625 */             } else if(isMimeMultipartXOPSoap1_2Package(ct)) {
/*  626 */                return 10;
/*      */             } else {
/*  628 */                log.severe("SAAJ0536.soap.content-type.mustbe.multipart");
/*  629 */                throw new SOAPExceptionImpl("Content-Type needs to be Multipart/Related and with \"type=text/xml\" or \"type=application/soap+xml\"");
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/*  635 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  636 */             throw new SOAPExceptionImpl("Invalid Content-Type: " + primary + '/' + sub);
/*      */ 
/*      */ 
/*      */          }
/*  640 */       } else if(isSoap1_1Type(primary, sub)) {
/*  641 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("fastinfoset")?16:0) | 1 | 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  646 */       } else if(!isSoap1_2Type(primary, sub)) {         }      } else {
/*  647 */          return (primary.equalsIgnoreCase("application") && sub.equalsIgnoreCase("soap+fastinfoset")?16:0) | 1 | 8;
/*      */       }
/*      */    }
/*      */ 
/*  651 */          if(isSOAPBodyXOPPackage(ct)) {
/*  652 */             return 13;
/*      */          } else {
/*  654 */             log.severe("SAAJ0537.soap.invalid.content-type");
/*  655 */             throw new SOAPExceptionImpl("Invalid Content-Type:" + primary + '/' + sub + ". Is this an error message instead of a SOAP response?");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private static String getTypeParameter(ContentType contentType) {
/*  668 */       String p = contentType.getParameter("type");
/*  669 */       return p != null?p.toLowerCase():"text/xml";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public MimeHeaders getMimeHeaders() {
/*  676 */       return this.headers;
/*      */    }
/*      */ 
/*      */    static final String getContentType(MimeHeaders headers) {
/*  680 */       String[] values = headers.getHeader("Content-Type");
/*  681 */       return values == null?null:values[0];
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getContentType() {
/*  691 */       return getContentType(this.headers);
/*      */    }
/*      */ 
/*      */    public void setContentType(String type) {
/*  695 */       this.headers.setHeader("Content-Type", type);
/*  696 */       this.needsSave();
/*  697 */    }
/*      */ 
/*      */    private ContentType contentType() {
/*  700 */       ContentType ct = null;
/*      */       try {
/*  702 */          String currentContent = this.getContentType();
/*  703 */          if(currentContent == null) {
/*  704 */             return this.contentType;
/*      */          }
/*  706 */          ct = new ContentType(currentContent);
/*  707 */       } catch (Exception arg2) {
/*      */          ;      }
/*      */ 
/*  710 */       return ct;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public String getBaseType() {
/*  717 */       return this.contentType().getBaseType();
/*      */    }
/*      */ 
/*      */    public void setBaseType(String type) {
/*  721 */       ContentType ct = this.contentType();
/*  722 */       ct.setParameter("type", type);
/*  723 */       this.headers.setHeader("Content-Type", ct.toString());
/*  724 */       this.needsSave();
/*  725 */    }
/*      */ 
/*      */    public String getAction() {
/*  728 */       return this.contentType().getParameter("action");
/*      */    }
/*      */ 
/*      */    public void setAction(String action) {
/*  732 */       ContentType ct = this.contentType();
/*  733 */       ct.setParameter("action", action);
/*  734 */       this.headers.setHeader("Content-Type", ct.toString());
/*  735 */       this.needsSave();
/*  736 */    }
/*      */ 
/*      */    public String getCharset() {
/*  739 */       return this.contentType().getParameter("charset");
/*      */    }
/*      */ 
/*      */    public void setCharset(String charset) {
/*  743 */       ContentType ct = this.contentType();
/*  744 */       ct.setParameter("charset", charset);
/*  745 */       this.headers.setHeader("Content-Type", ct.toString());
/*  746 */       this.needsSave();
/*  747 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private final void needsSave() {
/*  755 */       this.saved = false;
/*  756 */    }
/*      */ 
/*      */    public boolean saveRequired() {
/*  759 */       return !this.saved;
/*      */    }
/*      */ 
/*      */    public String getContentDescription() {
/*  763 */       String[] values = this.headers.getHeader("Content-Description");
/*  764 */       return values != null && values.length > 0?values[0]:null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void setContentDescription(String description) {
/*  770 */       this.headers.setHeader("Content-Description", description);
/*  771 */       this.needsSave();
/*  772 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAllAttachments() {
/*      */       try {
/*  778 */          this.initializeAllAttachments();
/*  779 */       } catch (Exception arg1) {
/*  780 */          throw new RuntimeException(arg1);
/*      */       }
/*      */ 
/*  783 */       if(this.attachments != null) {
/*  784 */          this.attachments.clear();
/*  785 */          this.needsSave();
/*      */       }
/*  787 */    }
/*      */ 
/*      */    public int countAttachments() {
/*      */       try {
/*  791 */          this.initializeAllAttachments();
/*  792 */       } catch (Exception arg1) {
/*  793 */          throw new RuntimeException(arg1);
/*      */       }
/*  795 */       return this.attachments != null?this.attachments.size():0;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    public void addAttachmentPart(AttachmentPart attachment) {
/*      */       try {
/*  802 */          this.initializeAllAttachments();
/*  803 */          this.optimizeAttachmentProcessing = true;
/*  804 */       } catch (Exception arg2) {
/*  805 */          throw new RuntimeException(arg2);
/*      */       }
/*  807 */       if(this.attachments == null) {
/*  808 */          this.attachments = new FinalArrayList();
/*      */       }
/*  810 */       this.attachments.add(attachment);
/*      */ 
/*  812 */       this.needsSave();
/*  813 */    }
/*      */ 
/*  815 */       nullIter = Collections.EMPTY_LIST.iterator();
/*      */    }
/*      */    public Iterator getAttachments() {
/*      */       try {
/*  819 */          this.initializeAllAttachments();
/*  820 */       } catch (Exception arg1) {
/*  821 */          throw new RuntimeException(arg1);
/*      */       }
/*  823 */       return this.attachments == null?nullIter:this.attachments.iterator();
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setFinalContentType(String charset) {
/*  829 */       ContentType ct = this.contentType();
/*  830 */       if(ct == null) {
/*  831 */          ct = new ContentType();
/*      */       }
/*  833 */       String[] split = this.getExpectedContentType().split("/");
/*  834 */       ct.setPrimaryType(split[0]);
/*  835 */       ct.setSubType(split[1]);
/*  836 */       ct.setParameter("charset", charset);
/*  837 */       this.headers.setHeader("Content-Type", ct.toString());
/*  838 */    }
/*      */    private class MimeMatchingIterator implements Iterator {      private Iterator iter;      private MimeHeaders headers;      private Object nextAttachment;
/*      */ 
/*      */       public MimeMatchingIterator(MimeHeaders headers) {
/*  842 */          this.headers = headers;
/*  843 */          this.iter = MessageImpl.this.attachments.iterator();
/*  844 */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       public boolean hasNext() {
/*  851 */          if(this.nextAttachment == null) {
/*  852 */             this.nextAttachment = this.nextMatch();         }
/*  853 */          return this.nextAttachment != null;
/*      */       }
/*      */ 
/*      */       public Object next() {
/*  857 */          if(this.nextAttachment != null) {
/*  858 */             Object ret = this.nextAttachment;
/*  859 */             this.nextAttachment = null;
/*  860 */             return ret;
/*      */ 
/*      */          } else {
/*  863 */             return this.hasNext()?this.nextAttachment:null;
/*      */          }
/*      */       }
/*      */ 
/*      */ 
/*      */       Object nextMatch() {
/*      */          while(true) {
/*  870 */             if(this.iter.hasNext()) {
/*  871 */                AttachmentPartImpl ap = (AttachmentPartImpl)this.iter.next();
/*  872 */                if(!ap.hasAllHeaders(this.headers)) {                  continue;               }
/*  873 */                return ap;
/*      */             }
/*  875 */             return null;
/*      */          }
/*      */       }
/*      */       public void remove() {
/*  879 */          this.iter.remove();
/*  880 */       }
/*      */    }
/*      */ 
/*      */    public Iterator getAttachments(MimeHeaders headers) {
/*      */       try {
/*  885 */          this.initializeAllAttachments();
/*  886 */       } catch (Exception arg2) {
/*  887 */          throw new RuntimeException(arg2);
/*      */       }
/*  889 */       return (Iterator)(this.attachments == null?nullIter:new MessageImpl.MimeMatchingIterator(headers));
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void removeAttachments(MimeHeaders headers) {
/*      */       try {
/*  897 */          this.initializeAllAttachments();
/*  898 */       } catch (Exception arg4) {
/*  899 */          throw new RuntimeException(arg4);
/*      */       }
/*  901 */       if(this.attachments != null) {      }
/*  902 */    }
/*      */ 
/*  904 */          MessageImpl.MimeMatchingIterator it = new MessageImpl.MimeMatchingIterator(headers);
/*  905 */          while(it.hasNext()) {
/*  906 */             int f = this.attachments.indexOf(it.next());
/*  907 */             this.attachments.set(f, (Object)null);
/*      */          }
/*  909 */          FinalArrayList arg5 = new FinalArrayList();
/*  910 */          for(int i = 0; i < this.attachments.size(); ++i) {
/*  911 */             if(this.attachments.get(i) != null) {
/*  912 */                arg5.add(this.attachments.get(i));
/*      */             }         }
/*      */ 
/*  915 */          this.attachments = arg5;
/*      */ 
/*      */ 
/*      */ 
/*      */    public AttachmentPart createAttachmentPart() {
/*  920 */       return new AttachmentPartImpl();
/*      */    }
/*      */ 
/*      */ 
/*      */    public AttachmentPart getAttachment(SOAPElement element) throws SOAPException {
/*      */       try {
/*  926 */          this.initializeAllAttachments();
/*  927 */       } catch (Exception arg5) {
/*  928 */          throw new RuntimeException(arg5);
/*      */       }
/*      */ 
/*  931 */       String hrefAttr = element.getAttribute("href");      String uri;
/*  932 */       if("".equals(hrefAttr)) {
/*  933 */          Node node = this.getValueNodeStrict(element);
/*  934 */          String swaRef = null;
/*  935 */          if(node != null) {
/*  936 */             swaRef = node.getValue();
/*      */          }
/*  938 */          if(swaRef == null || "".equals(swaRef)) {
/*  939 */             return null;
/*      */          }
/*  941 */          uri = swaRef;
/*      */ 
/*      */       } else {
/*  944 */          uri = hrefAttr;
/*      */       }
/*  946 */       return this.getAttachmentPart(uri);
/*      */    }
/*      */ 
/*      */    private Node getValueNodeStrict(SOAPElement element) {
/*  950 */       Node node = (Node)element.getFirstChild();
/*  951 */       return node != null?(node.getNextSibling() == null && node.getNodeType() == 3?node:null):null;
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private AttachmentPart getAttachmentPart(String uri) throws SOAPException {
/*      */       try {
/*      */          AttachmentPart _part;
/*      */          MimeHeaders se;
/*      */          Iterator p;
/*  966 */          if(uri.startsWith("cid:")) {
/*      */ 
/*  968 */             uri = '<' + uri.substring("cid:".length()) + '>';
/*      */ 
/*  970 */             se = new MimeHeaders();
/*  971 */             se.addHeader("Content-ID", uri);
/*      */ 
/*  973 */             p = this.getAttachments(se);
/*  974 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          } else {
/*  977 */             se = new MimeHeaders();
/*  978 */             se.addHeader("Content-Location", uri);
/*      */ 
/*  980 */             p = this.getAttachments(se);
/*  981 */             _part = p == null?null:(AttachmentPart)p.next();
/*      */ 
/*      */          }
/*      */ 
/*  985 */          if(_part == null) {
/*  986 */             Iterator se1 = this.getAttachments();
/*      */ 
/*  988 */             while(se1.hasNext()) {
/*  989 */                AttachmentPart p1 = (AttachmentPart)se1.next();
/*  990 */                String cl = p1.getContentId();
/*  991 */                if(cl != null) {
/*      */ 
/*  993 */                   int eqIndex = cl.indexOf("=");
/*  994 */                   if(eqIndex > -1) {
/*  995 */                      cl = cl.substring(1, eqIndex);
/*  996 */                      if(cl.equalsIgnoreCase(uri)) {
/*  997 */                         _part = p1;
/*  998 */                         break;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                      }
/*      */                   }               }
/* 1005 */       } catch (Exception arg6) {            }
/* 1006 */          log.log(Level.SEVERE, "SAAJ0590.soap.unable.to.locate.attachment", new Object[]{uri});         }
/* 1007 */          throw new SOAPExceptionImpl(arg6);      }   }
/*      */ 
/* 1009 */          return _part;
/*      */ 
/*      */ 
/*      */ 
/*      */    private final InputStream getHeaderBytes() throws IOException {
/* 1014 */       SOAPPartImpl sp = (SOAPPartImpl)this.getSOAPPart();
/* 1015 */       return sp.getContentAsStream();
/*      */    }
/*      */ 
/*      */    private String convertToSingleLine(String contentType) {
/* 1019 */       StringBuffer buffer = new StringBuffer();
/* 1020 */       for(int i = 0; i < contentType.length(); ++i) {
/* 1021 */          char c = contentType.charAt(i);
/* 1022 */          if(c != 13 && c != 10 && c != 9) {
/* 1023 */             buffer.append(c);
/*      */          }      }
/* 1025 */       return buffer.toString();
/*      */    }
/*      */ 
/*      */    private MimeMultipart getMimeMessage() throws SOAPException {
/*      */       try {
/* 1030 */          SOAPPartImpl ex = (SOAPPartImpl)this.getSOAPPart();
/* 1031 */          MimeBodyPart mimeSoapPart = ex.getMimePart();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1037 */          ContentType soapPartCtype = new ContentType(this.getExpectedContentType());
/*      */ 
/* 1039 */          if(!this.isFastInfoset) {
/* 1040 */             soapPartCtype.setParameter("charset", this.initCharset());
/*      */          }
/* 1042 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/*      */ 
/* 1044 */          Object headerAndBody = null;
/*      */          Iterator contentType;
/* 1046 */          if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1048 */             headerAndBody = new BMMimeMultipart();
/* 1049 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/* 1050 */             if(this.attachments != null) {
/* 1051 */                contentType = this.attachments.iterator();
/* 1052 */                while(contentType.hasNext()) {
/* 1053 */                   ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */                }
/*      */             }
/*      */ 
/* 1058 */             InputStream contentType1 = ((BMMimeMultipart)this.multiPart).getInputStream();
/* 1059 */             if(!((BMMimeMultipart)this.multiPart).lastBodyPartFound() && !((BMMimeMultipart)this.multiPart).isEndOfStream()) {
/*      */ 
/* 1061 */                ((BMMimeMultipart)headerAndBody).setInputStream(contentType1);
/* 1062 */                ((BMMimeMultipart)headerAndBody).setBoundary(((BMMimeMultipart)this.multiPart).getBoundary());
/*      */ 
/* 1064 */                ((BMMimeMultipart)headerAndBody).setLazyAttachments(this.lazyAttachments);
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1069 */             headerAndBody = new MimeMultipart();
/* 1070 */             ((MimeMultipart)headerAndBody).addBodyPart(mimeSoapPart);
/*      */ 
/* 1072 */             contentType = this.getAttachments();
/* 1073 */             while(contentType.hasNext()) {
/*      */ 
/* 1075 */                ((MimeMultipart)headerAndBody).addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */             }
/*      */          }
/*      */ 
/* 1081 */          ContentType contentType2 = ((MimeMultipart)headerAndBody).getContentType();
/*      */ 
/* 1083 */          ParameterList l = contentType2.getParameterList();
/*      */ 
/*      */ 
/* 1086 */          l.set("type", this.getExpectedContentType());
/* 1087 */          l.set("boundary", contentType2.getParameter("boundary"));
/* 1088 */          ContentType nct = new ContentType("multipart", "related", l);
/*      */ 
/* 1090 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1096 */          return (MimeMultipart)headerAndBody;
/* 1097 */       } catch (SOAPException arg7) {
/* 1098 */          throw arg7;
/* 1099 */       } catch (Throwable arg8) {
/* 1100 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1101 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg8);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String initCharset() {
/* 1110 */       String charset = null;
/*      */ 
/* 1112 */       String[] cts = this.getMimeHeaders().getHeader("Content-Type");
/* 1113 */       if(cts != null && cts[0] != null) {
/* 1114 */          charset = this.getCharsetString(cts[0]);
/*      */       }
/*      */ 
/* 1117 */       if(charset == null) {
/* 1118 */          charset = (String)this.getProperty("javax.xml.soap.character-set-encoding");
/*      */       }
/*      */ 
/* 1121 */       return charset != null?charset:"utf-8";
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private String getCharsetString(String s) {
/*      */       try {
/* 1130 */          int e = s.indexOf(";");
/* 1131 */          if(e < 0) {
/* 1132 */             return null;         } else {
/* 1133 */             ParameterList pl = new ParameterList(s.substring(e));
/* 1134 */             return pl.get("charset");         }
/* 1135 */       } catch (Exception arg3) {
/* 1136 */          return null;
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    public void saveChanges() throws SOAPException {
/* 1145 */       String charset = this.initCharset();
/*      */ 
/*      */ 
/* 1148 */       int attachmentCount = this.attachments == null?0:this.attachments.size();
/* 1149 */       if(attachmentCount == 0 && !switchOffBM && !switchOffLazyAttachment && !this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1153 */          attachmentCount = 1;
/*      */ 
/*      */       }
/*      */ 
/*      */       try {
/* 1158 */          if(attachmentCount == 0 && !this.hasXOPContent()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             InputStream ex;
/*      */             try {
/* 1166 */                ex = this.getHeaderBytes();
/*      */ 
/* 1168 */                this.optimizeAttachmentProcessing = false;
/* 1169 */                if(SOAPPartImpl.lazyContentLength) {
/* 1170 */                   this.inputStreamAfterSaveChanges = ex;
/*      */                }
/* 1172 */             } catch (IOException arg4) {
/* 1173 */                log.severe("SAAJ0539.soap.cannot.get.header.stream");
/* 1174 */                throw new SOAPExceptionImpl("Unable to get header stream in saveChanges: ", arg4);
/*      */ 
/*      */ 
/*      */             }
/*      */ 
/* 1179 */             if(ex instanceof ByteInputStream) {
/* 1180 */                ByteInputStream bIn = (ByteInputStream)ex;
/* 1181 */                this.messageBytes = bIn.getBytes();
/* 1182 */                this.messageByteCount = bIn.getCount();
/*      */             }
/*      */ 
/* 1185 */             this.setFinalContentType(charset);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1191 */             if(this.messageByteCount > 0) {
/* 1192 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */ 
/*      */             }
/* 1197 */          } else if(this.hasXOPContent()) {
/* 1198 */             this.mmp = this.getXOPMessage();
/*      */          } else {
/* 1200 */             this.mmp = this.getMimeMessage();
/*      */          }
/* 1202 */       } catch (Throwable arg5) {
/* 1203 */          log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1204 */          throw new SOAPExceptionImpl("Error during saving a multipart message", arg5);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       }
/*      */ 
/* 1221 */       this.saved = true;
/* 1222 */    }
/*      */ 
/*      */    private MimeMultipart getXOPMessage() throws SOAPException {
/*      */       try {
/* 1226 */          MimeMultipart ex = new MimeMultipart();
/* 1227 */          SOAPPartImpl soapPart = (SOAPPartImpl)this.getSOAPPart();
/* 1228 */          MimeBodyPart mimeSoapPart = soapPart.getMimePart();
/* 1229 */          ContentType soapPartCtype = new ContentType("application/xop+xml");
/*      */ 
/* 1231 */          soapPartCtype.setParameter("type", this.getExpectedContentType());
/* 1232 */          String charset = this.initCharset();
/* 1233 */          soapPartCtype.setParameter("charset", charset);
/* 1234 */          mimeSoapPart.setHeader("Content-Type", soapPartCtype.toString());
/* 1235 */          ex.addBodyPart(mimeSoapPart);
/*      */ 
/* 1237 */          Iterator contentType = this.getAttachments();
/* 1238 */          while(contentType.hasNext()) {
/*      */ 
/* 1240 */             ex.addBodyPart(((AttachmentPartImpl)contentType.next()).getMimePart());
/*      */ 
/*      */ 
/*      */          }
/*      */ 
/* 1245 */          ContentType contentType1 = ex.getContentType();
/*      */ 
/* 1247 */          ParameterList l = contentType1.getParameterList();
/*      */ 
/*      */ 
/* 1250 */          l.set("start-info", this.getExpectedContentType());
/*      */ 
/*      */ 
/* 1253 */          l.set("type", "application/xop+xml");
/*      */ 
/* 1255 */          if(this.isCorrectSoapVersion(8)) {
/* 1256 */             String nct = this.getAction();
/* 1257 */             if(nct != null) {
/* 1258 */                l.set("action", nct);
/*      */             }         }
/*      */ 
/* 1261 */          l.set("boundary", contentType1.getParameter("boundary"));
/* 1262 */          ContentType nct1 = new ContentType("Multipart", "Related", l);
/* 1263 */          this.headers.setHeader("Content-Type", this.convertToSingleLine(nct1.toString()));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1269 */          return ex;
/* 1270 */       } catch (SOAPException arg8) {
/* 1271 */          throw arg8;
/* 1272 */       } catch (Throwable arg9) {
/* 1273 */          log.severe("SAAJ0538.soap.cannot.convert.msg.to.multipart.obj");
/* 1274 */          throw new SOAPExceptionImpl("Unable to convert SOAP message into a MimeMultipart object", arg9);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private boolean hasXOPContent() throws ParseException {
/* 1283 */       String type = this.getContentType();
/* 1284 */       if(type == null) {
/* 1285 */          return false;      } else {
/* 1286 */          ContentType ct = new ContentType(type);
/*      */ 
/* 1288 */          return isMimeMultipartXOPSoap1_1Package(ct) || isMimeMultipartXOPSoap1_2Package(ct) || isSOAPBodyXOPPackage(ct);
/*      */       }
/*      */    }
/*      */ 
/*      */ 
/*      */    public void writeTo(OutputStream out) throws SOAPException, IOException {
/* 1294 */       if(this.saveRequired()) {
/* 1295 */          this.optimizeAttachmentProcessing = true;
/* 1296 */          this.saveChanges();
/*      */       }
/*      */ 
/* 1299 */       if(!this.optimizeAttachmentProcessing) {
/* 1300 */          if(SOAPPartImpl.lazyContentLength && this.messageByteCount <= 0) {
/* 1301 */             byte[] soapAction = new byte[1024];
/*      */             int length1;
/* 1303 */             for(boolean length = false; (length1 = this.inputStreamAfterSaveChanges.read(soapAction)) != -1; this.messageByteCount += length1) {
/*      */ 
/* 1305 */                out.write(soapAction, 0, length1);
/*      */             }
/*      */ 
/* 1308 */             if(this.messageByteCount > 0) {
/* 1309 */                this.headers.setHeader("Content-Length", Integer.toString(this.messageByteCount));
/*      */ 
/*      */ 
/*      */             }
/*      */          } else {
/* 1314 */             out.write(this.messageBytes, 0, this.messageByteCount);
/*      */ 
/*      */          }
/*      */       } else {
/*      */          try {
/* 1319 */             if(this.hasXOPContent()) {
/* 1320 */                this.mmp.writeTo(out);
/*      */             } else {
/* 1322 */                this.mmp.writeTo(out);
/* 1323 */                if(!switchOffBM && !switchOffLazyAttachment && this.multiPart != null && !this.attachmentsInitialized) {
/*      */ 
/* 1325 */                   ((BMMimeMultipart)this.multiPart).setInputStream(((BMMimeMultipart)this.mmp).getInputStream());
/*      */ 
/*      */                }
/*      */             }
/* 1329 */          } catch (Exception arg3) {
/* 1330 */             log.severe("SAAJ0540.soap.err.saving.multipart.msg");
/* 1331 */             throw new SOAPExceptionImpl("Error during saving a multipart message", arg3);
/*      */ 
/*      */ 
/*      */          }
/*      */       }
/*      */ 
/* 1337 */       if(this.isCorrectSoapVersion(4)) {
/*      */ 
/* 1339 */          String[] soapAction1 = this.headers.getHeader("SOAPAction");
/*      */ 
/* 1341 */          if(soapAction1 == null || soapAction1.length == 0) {
/* 1342 */             this.headers.setHeader("SOAPAction", "\"\"");
/*      */          }
/*      */       }
/*      */ 
/* 1346 */       this.messageBytes = null;
/* 1347 */       this.needsSave();
/* 1348 */    }
/*      */ 
/*      */    public SOAPBody getSOAPBody() throws SOAPException {
/* 1351 */       SOAPBody body = this.getSOAPPart().getEnvelope().getBody();
/*      */ 
/*      */ 
/*      */ 
/* 1355 */       return body;
/*      */    }
/*      */ 
/*      */    public SOAPHeader getSOAPHeader() throws SOAPException {
/* 1359 */       SOAPHeader hdr = this.getSOAPPart().getEnvelope().getHeader();
/*      */ 
/*      */ 
/*      */ 
/* 1363 */       return hdr;
/*      */    }
/*      */ 
/*      */ 
/*      */    private void initializeAllAttachments() throws MessagingException, SOAPException {
/* 1368 */       if(!switchOffBM && !switchOffLazyAttachment) {         }      }
/* 1369 */    }
/*      */ 
/*      */ 
/* 1372 */          if(!this.attachmentsInitialized && this.multiPart != null) {
/*      */ 
/*      */ 
/*      */ 
/* 1376 */             if(this.attachments == null) {
/* 1377 */                this.attachments = new FinalArrayList();
/*      */             }
/* 1379 */             int count = this.multiPart.getCount();
/* 1380 */             for(int i = 0; i < count; ++i) {
/* 1381 */                this.initializeAttachment(this.multiPart.getBodyPart(i));
/*      */             }
/* 1383 */             this.attachmentsInitialized = true;
/*      */ 
/* 1385 */             this.needsSave();
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeBodyPart mbp) throws SOAPException {
/* 1389 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/* 1390 */       DataHandler attachmentHandler = mbp.getDataHandler();
/* 1391 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1393 */       AttachmentPartImpl.copyMimeHeaders(mbp, attachmentPart);
/* 1394 */       this.attachments.add(attachmentPart);
/* 1395 */    }
/*      */ 
/*      */ 
/*      */    private void initializeAttachment(MimeMultipart multiPart, int i) throws Exception {
/* 1399 */       MimeBodyPart currentBodyPart = multiPart.getBodyPart(i);
/* 1400 */       AttachmentPartImpl attachmentPart = new AttachmentPartImpl();
/*      */ 
/* 1402 */       DataHandler attachmentHandler = currentBodyPart.getDataHandler();
/* 1403 */       attachmentPart.setDataHandler(attachmentHandler);
/*      */ 
/* 1405 */       AttachmentPartImpl.copyMimeHeaders(currentBodyPart, attachmentPart);
/* 1406 */       this.addAttachmentPart(attachmentPart);
/* 1407 */    }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */    private void setMimeHeaders(SOAPPart soapPart, MimeBodyPart soapMessagePart) throws Exception {
/* 1413 */       soapPart.removeAllMimeHeaders();
/*      */ 
/* 1415 */       FinalArrayList headers = soapMessagePart.getAllHeaders();
/* 1416 */       int sz = headers.size();
/* 1417 */       for(int i = 0; i < sz; ++i) {
/* 1418 */          Header h = (Header)headers.get(i);
/* 1419 */          soapPart.addMimeHeader(h.getName(), h.getValue());
/*      */       }
/* 1421 */    }
/*      */ 
/*      */    private void initCharsetProperty(ContentType contentType) {
/* 1424 */       String charset = contentType.getParameter("charset");
/* 1425 */       if(charset != null) {
/* 1426 */          ((SOAPPartImpl)this.getSOAPPart()).setSourceCharsetEncoding(charset);
/* 1427 */          if(!charset.equalsIgnoreCase("utf-8")) {
/* 1428 */             this.setProperty("javax.xml.soap.character-set-encoding", charset);
/*      */          }      }
/* 1430 */    }
/*      */ 
/*      */    public void setLazyAttachments(boolean flag) {
/* 1433 */       this.lazyAttachments = flag;
/* 1434 */    }
/*      */ }

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:425)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2518)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1697)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2758)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1259)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:423)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:188)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2965)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:157)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:132)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:100)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:383)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
